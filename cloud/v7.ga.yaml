openapi: 3.0.3
info:
  title: CLOUD API
  description: >-
    IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be
    managed through the Cloud API, in addition or as an alternative to the "Data
    Center Designer" (DCD) browser-based tool. 
    Both methods employ consistent concepts and features, deliver similar power and
    flexibility, and can be used to perform a multitude of management tasks, including
    adding servers, volumes, configuring networks, and so on.
  version: '7.0.1'
  x-sdk-patch-level: 5
servers:
  - url: https://api.de-fra.ionos.com/v7
    description: Frankfurt, Germany
  - url: https://api.de-fkb.ionos.com/v7
    description: Karlsruhe, Germany
  - url: https://api.de-txl.ionos.com/v7
    description: Berlin, Germany
  - url: https://api.es-vit.ionos.com/v7
    description: Logrono, Spain
  - url: https://api.fr-nbz.ionos.com/v7
    description: Niederlauterbach, France
  - url: https://api.fr-par.ionos.com/v7
    description: Paris, France
  - url: https://api.gb-bhx.ionos.com/v7
    description: Worcester, Great Britain
  - url: https://api.gb-lhr.ionos.com/v7
    description: London, Great Britain
  - url: https://api.us-ewr.ionos.com/v7
    description: Newark, United States
  - url: https://api.us-las.ionos.com/v7
    description: Las Vegas, United States
  - url: https://api.us-mci.ionos.com/v7
    description: Lenexa, United States
tags:
- name: Locations
  description: |
    Retrieves Locations.
    
    This tag groups all operations for locations.
- name: Templates
  description: |
    Retrieves Templates.
    
    This tag groups all operations for templates.
- name: IP Blocks
  description: |
    Creates and manages IP Blocks.
    
    This tag groups all operations for ip blocks.
- name: Images
  description: |
    Manages Images.
    
    This tag groups all operations for images.
- name: Virtual Private Clouds
  description: |
    Creates and manages Virtual Private Clouds.
    
    This tag groups all operations for virtual private clouds.
- name: Datacenters
  description: |
    Creates and manages Datacenters.
    
    This tag groups all operations for datacenters.
- name: Servers
  description: |
    Creates and manages Servers.
    
    This tag groups all operations for servers.
- name: Volumes
  description: |
    Creates and manages Volumes.
    
    This tag groups all operations for volumes.
- name: Snapshots
  description: |
    Creates and manages Snapshots.
    
    This tag groups all operations for snapshots.
- name: Network Interfaces
  description: |
    Creates and manages Network Intefaces.
    
    This tag groups all operations for network interfaces.
- name: Local Area Networks
  description: |
    Creates and manages Local Area Networks.
    
    This tag groups all operations for local area networks.
- name: Flow Logs
  description: |
    Creates and manages Flow Logs.
    
    This tag groups all operations for flow logs.
- name: Network ACLs
  description: |
    Creates and manages Network ACLs.
    
    This tag groups all operations for network acls.
- name: Network ACL Rules
  description: |
    Creates and manages NetworkAcl Rules.
    
    This tag groups all operations for network acl rules.
- name: Route Tables
  description: |
    Creates and manages Route Tables.
    
    This tag groups all operations for route tables.
- name: Routes
  description: |
    Creates and manages Routes.
    
    This tag groups all operations for routes.
- name: Security Groups
  description: |
    Creates and manages Security Groups.
    
    This tag groups all operations for security groups.
- name: Security Group Rules
  description: |
    Creates and manages Security Group Rules.
    
    This tag groups all operations for security group rules.
- name: Operations
  description: |
    Performs various operations on servers like STOP, START, SUSPEND, RESUME, etc.
    
    This tag groups all operations for operations.
paths:
  /locations:
    get:
      operationId: locationsGet
      summary: Retrieve all Locations
      security:
      - tokenAuth: []
      description: |
        This endpoint enables retrieving all Locations using
        pagination and optional filters.
      parameters:
        - $ref: "#/components/parameters/paginationOffset"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/contractNumber"
      tags:
        - Locations
      responses:
        "200":
          description: |
            Returned all requested Locations successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationReadList"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /locations/{locationId}:
    get:
      operationId: locationsFindById
      summary: Retrieve Location
      security:
      - tokenAuth: []
      tags:
        - Locations
      description: Returns the Location by ID.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: locationId
          in: path
          schema:
            type: string
            format: uuid
          example: "f59e4bc2-6aff-5ecc-b745-321db2fdd071"
          required: true
          description: The ID (UUID) of the Location.
      responses:
        "200":
          description: Getting Location was successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /templates:
    get:
      operationId: templatesGet
      summary: Retrieve all Templates
      security:
      - tokenAuth: []
      description: |
        This endpoint enables retrieving all Templates using
        pagination and optional filters.
      parameters:
        - $ref: "#/components/parameters/paginationOffset"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/contractNumber"
      tags:
        - Templates
      responses:
        "200":
          description: |
            Returned all requested Templates successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateReadList"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /templates/{templateId}:
    get:
      operationId: templatesFindById
      summary: Retrieve Template
      security:
      - tokenAuth: []
      tags:
        - Templates
      description: Returns the Template by ID.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: templateId
          in: path
          schema:
            type: string
            format: uuid
          example: "5afb3086-5b37-5cc0-b126-075231c7bcb6"
          required: true
          description: The ID (UUID) of the Template.
      responses:
        "200":
          description: Getting Template was successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /ipblocks:
    get:
      operationId: ipblocksGet
      summary: Retrieve all IP Blocks
      security:
      - tokenAuth: []
      description: |
        This endpoint enables retrieving all IP Blocks using
        pagination and optional filters.
      parameters:
        - $ref: "#/components/parameters/paginationOffset"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/contractNumber"
        - $ref: "#/components/parameters/vpc"
        - $ref: "#/components/parameters/datacenter"
      tags:
        - IP Blocks
      responses:
        "200":
          description: |
            Returned all requested IP Blocks successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IpBlockReadList"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      operationId: ipblocksPost
      summary: Create IpBlock
      security:
      - tokenAuth: []
      tags:
        - IP Blocks
      description: |
        Creates a new IpBlock.
        
        The full IpBlock needs to be provided to create the object.
        Optional data will be filled with defaults or left empty.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
      requestBody:
        description: IpBlock to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IpBlockCreate"
      responses:
        "201":
          description: IpBlock successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IpBlockRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /ipblocks/{ipblockId}:
    get:
      operationId: ipblocksFindById
      summary: Retrieve IpBlock
      security:
      - tokenAuth: []
      tags:
        - IP Blocks
      description: Returns the IpBlock by ID.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: ipblockId
          in: path
          schema:
            type: string
            format: uuid
          example: "a480b1c3-c104-589b-b1d4-e181f1d25069"
          required: true
          description: The ID (UUID) of the IpBlock.
      responses:
        "200":
          description: Getting IpBlock was successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IpBlockRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    put:
      operationId: ipblocksPut
      summary: Ensure IpBlock
      security:
      - tokenAuth: []
      tags:
        - IP Blocks
      description: |
        Ensures that the IpBlock with the provided ID is created or modified.
        The full IpBlock needs to be provided to ensure
        (either update or create) the IpBlock. Non present data will
        only be filled with defaults or left empty, but not take
        previous values into consideration.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: ipblockId
          in: path
          schema:
            type: string
            format: uuid
          example: "a480b1c3-c104-589b-b1d4-e181f1d25069"
          required: true
          description: The ID (UUID) of the IpBlock.
      requestBody:
        description: update IpBlock
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IpBlockEnsure"
      responses:
        "200":
          description: IpBlock successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IpBlockRead"
        "201":
          description: IpBlock successfully ensured.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IpBlockRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "409":
          $ref: '#/components/responses/Conflict'
        "404":
          $ref: '#/components/responses/NotFound'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      operationId: ipblocksDelete
      summary: Delete IpBlock
      security:
      - tokenAuth: []
      tags:
        - IP Blocks
      description: Deletes the specified IpBlock.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: ipblockId
          in: path
          schema:
            type: string
            format: uuid
          example: "a480b1c3-c104-589b-b1d4-e181f1d25069"
          required: true
          description: The ID (UUID) of the IpBlock.
      responses:
        "202":
          description: Deleting IpBlock was successful.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /images:
    get:
      operationId: imagesGet
      summary: Retrieve all Images
      security:
      - tokenAuth: []
      description: |
        This endpoint enables retrieving all Images using
        pagination and optional filters.
      parameters:
        - $ref: "#/components/parameters/paginationOffset"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/contractNumber"
        - $ref: "#/components/parameters/vpc"
        - $ref: "#/components/parameters/datacenter"
        - $ref: "#/components/parameters/server"
      tags:
        - Images
      responses:
        "200":
          description: |
            Returned all requested Images successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageReadList"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /images/{imageId}:
    get:
      operationId: imagesFindById
      summary: Retrieve Image
      security:
      - tokenAuth: []
      tags:
        - Images
      description: Returns the Image by ID.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: imageId
          in: path
          schema:
            type: string
            format: uuid
          example: "78916e89-f0ed-5816-b86d-5e55b6f2a884"
          required: true
          description: The ID (UUID) of the Image.
      responses:
        "200":
          description: Getting Image was successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    put:
      operationId: imagesPut
      summary: Ensure Image
      security:
      - tokenAuth: []
      tags:
        - Images
      description: |
        Ensures that the Image with the provided ID is created or modified.
        The full Image needs to be provided to ensure
        (either update or create) the Image. Non present data will
        only be filled with defaults or left empty, but not take
        previous values into consideration.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: imageId
          in: path
          schema:
            type: string
            format: uuid
          example: "78916e89-f0ed-5816-b86d-5e55b6f2a884"
          required: true
          description: The ID (UUID) of the Image.
      requestBody:
        description: update Image
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImageEnsure"
      responses:
        "200":
          description: Image successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageRead"
        "201":
          description: Image successfully ensured.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "409":
          $ref: '#/components/responses/Conflict'
        "404":
          $ref: '#/components/responses/NotFound'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      operationId: imagesDelete
      summary: Delete Image
      security:
      - tokenAuth: []
      tags:
        - Images
      description: Deletes the specified Image.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: imageId
          in: path
          schema:
            type: string
            format: uuid
          example: "78916e89-f0ed-5816-b86d-5e55b6f2a884"
          required: true
          description: The ID (UUID) of the Image.
      responses:
        "202":
          description: Deleting Image was successful.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /vpcs:
    get:
      operationId: vpcsGet
      summary: Retrieve all Virtual Private Clouds
      security:
      - tokenAuth: []
      description: |
        This endpoint enables retrieving all Virtual Private Clouds using
        pagination and optional filters.
      parameters:
        - $ref: "#/components/parameters/paginationOffset"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/contractNumber"
      tags:
        - Virtual Private Clouds
      responses:
        "200":
          description: |
            Returned all requested Virtual Private Clouds successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VpcReadList"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      operationId: vpcsPost
      summary: Create Vpc
      security:
      - tokenAuth: []
      tags:
        - Virtual Private Clouds
      description: |
        Creates a new Vpc.
        
        The full Vpc needs to be provided to create the object.
        Optional data will be filled with defaults or left empty.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
      requestBody:
        description: Vpc to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VpcCreate"
      responses:
        "201":
          description: Vpc successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VpcRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /vpcs/{vpcId}:
    get:
      operationId: vpcsFindById
      summary: Retrieve Vpc
      security:
      - tokenAuth: []
      tags:
        - Virtual Private Clouds
      description: Returns the Vpc by ID.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: vpcId
          in: path
          schema:
            type: string
            format: uuid
          example: "e50a7f27-79ce-53c6-8c2a-661949161972"
          required: true
          description: The ID (UUID) of the Vpc.
      responses:
        "200":
          description: Getting Vpc was successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VpcRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    put:
      operationId: vpcsPut
      summary: Ensure Vpc
      security:
      - tokenAuth: []
      tags:
        - Virtual Private Clouds
      description: |
        Ensures that the Vpc with the provided ID is created or modified.
        The full Vpc needs to be provided to ensure
        (either update or create) the Vpc. Non present data will
        only be filled with defaults or left empty, but not take
        previous values into consideration.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: vpcId
          in: path
          schema:
            type: string
            format: uuid
          example: "e50a7f27-79ce-53c6-8c2a-661949161972"
          required: true
          description: The ID (UUID) of the Vpc.
      requestBody:
        description: update Vpc
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VpcEnsure"
      responses:
        "200":
          description: Vpc successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VpcRead"
        "201":
          description: Vpc successfully ensured.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VpcRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "409":
          $ref: '#/components/responses/Conflict'
        "404":
          $ref: '#/components/responses/NotFound'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      operationId: vpcsDelete
      summary: Delete Vpc
      security:
      - tokenAuth: []
      tags:
        - Virtual Private Clouds
      description: Deletes the specified Vpc.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: vpcId
          in: path
          schema:
            type: string
            format: uuid
          example: "e50a7f27-79ce-53c6-8c2a-661949161972"
          required: true
          description: The ID (UUID) of the Vpc.
      responses:
        "202":
          description: Deleting Vpc was successful.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /datacenters:
    get:
      operationId: datacentersGet
      summary: Retrieve all Datacenters
      security:
      - tokenAuth: []
      description: |
        This endpoint enables retrieving all Datacenters using
        pagination and optional filters.
      parameters:
        - $ref: "#/components/parameters/paginationOffset"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/contractNumber"
        - $ref: "#/components/parameters/vpc"
      tags:
        - Datacenters
      responses:
        "200":
          description: |
            Returned all requested Datacenters successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatacenterReadList"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      operationId: datacentersPost
      summary: Create Datacenter
      security:
      - tokenAuth: []
      tags:
        - Datacenters
      description: |
        Creates a new Datacenter.
        
        The full Datacenter needs to be provided to create the object.
        Optional data will be filled with defaults or left empty.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
      requestBody:
        description: Datacenter to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DatacenterCreate"
      responses:
        "201":
          description: Datacenter successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatacenterRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /datacenters/{datacenterId}:
    get:
      operationId: datacentersFindById
      summary: Retrieve Datacenter
      security:
      - tokenAuth: []
      tags:
        - Datacenters
      description: Returns the Datacenter by ID.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: datacenterId
          in: path
          schema:
            type: string
            format: uuid
          example: "d6e4e4d9-e542-5089-96c6-0087a38fda91"
          required: true
          description: The ID (UUID) of the Datacenter.
      responses:
        "200":
          description: Getting Datacenter was successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatacenterRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    put:
      operationId: datacentersPut
      summary: Ensure Datacenter
      security:
      - tokenAuth: []
      tags:
        - Datacenters
      description: |
        Ensures that the Datacenter with the provided ID is created or modified.
        The full Datacenter needs to be provided to ensure
        (either update or create) the Datacenter. Non present data will
        only be filled with defaults or left empty, but not take
        previous values into consideration.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: datacenterId
          in: path
          schema:
            type: string
            format: uuid
          example: "d6e4e4d9-e542-5089-96c6-0087a38fda91"
          required: true
          description: The ID (UUID) of the Datacenter.
      requestBody:
        description: update Datacenter
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DatacenterEnsure"
      responses:
        "200":
          description: Datacenter successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatacenterRead"
        "201":
          description: Datacenter successfully ensured.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatacenterRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "409":
          $ref: '#/components/responses/Conflict'
        "404":
          $ref: '#/components/responses/NotFound'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      operationId: datacentersDelete
      summary: Delete Datacenter
      security:
      - tokenAuth: []
      tags:
        - Datacenters
      description: Deletes the specified Datacenter.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: datacenterId
          in: path
          schema:
            type: string
            format: uuid
          example: "d6e4e4d9-e542-5089-96c6-0087a38fda91"
          required: true
          description: The ID (UUID) of the Datacenter.
      responses:
        "202":
          description: Deleting Datacenter was successful.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /servers:
    get:
      operationId: serversGet
      summary: Retrieve all Servers
      security:
      - tokenAuth: []
      description: |
        This endpoint enables retrieving all Servers using
        pagination and optional filters.
      parameters:
        - $ref: "#/components/parameters/paginationOffset"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/contractNumber"
        - $ref: "#/components/parameters/vpc"
        - $ref: "#/components/parameters/datacenter"
      tags:
        - Servers
      responses:
        "200":
          description: |
            Returned all requested Servers successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerReadList"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      operationId: serversPost
      summary: Create Server
      security:
      - tokenAuth: []
      tags:
        - Servers
      description: |
        Creates a new Server.
        
        The full Server needs to be provided to create the object.
        Optional data will be filled with defaults or left empty.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
      requestBody:
        description: Server to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServerCreate"
      responses:
        "201":
          description: Server successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /servers/{serverId}:
    get:
      operationId: serversFindById
      summary: Retrieve Server
      security:
      - tokenAuth: []
      tags:
        - Servers
      description: Returns the Server by ID.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: serverId
          in: path
          schema:
            type: string
            format: uuid
          example: "10ac0074-96c1-5d50-8852-81bd6272cb18"
          required: true
          description: The ID (UUID) of the Server.
      responses:
        "200":
          description: Getting Server was successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    put:
      operationId: serversPut
      summary: Ensure Server
      security:
      - tokenAuth: []
      tags:
        - Servers
      description: |
        Ensures that the Server with the provided ID is created or modified.
        The full Server needs to be provided to ensure
        (either update or create) the Server. Non present data will
        only be filled with defaults or left empty, but not take
        previous values into consideration.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: serverId
          in: path
          schema:
            type: string
            format: uuid
          example: "10ac0074-96c1-5d50-8852-81bd6272cb18"
          required: true
          description: The ID (UUID) of the Server.
      requestBody:
        description: update Server
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServerEnsure"
      responses:
        "200":
          description: Server successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerRead"
        "201":
          description: Server successfully ensured.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "409":
          $ref: '#/components/responses/Conflict'
        "404":
          $ref: '#/components/responses/NotFound'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      operationId: serversDelete
      summary: Delete Server
      security:
      - tokenAuth: []
      tags:
        - Servers
      description: Deletes the specified Server.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: serverId
          in: path
          schema:
            type: string
            format: uuid
          example: "10ac0074-96c1-5d50-8852-81bd6272cb18"
          required: true
          description: The ID (UUID) of the Server.
      responses:
        "202":
          description: Deleting Server was successful.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /volumes:
    get:
      operationId: volumesGet
      summary: Retrieve all Volumes
      security:
      - tokenAuth: []
      description: |
        This endpoint enables retrieving all Volumes using
        pagination and optional filters.
      parameters:
        - $ref: "#/components/parameters/paginationOffset"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/contractNumber"
        - $ref: "#/components/parameters/vpc"
        - $ref: "#/components/parameters/datacenter"
        - $ref: "#/components/parameters/server"
      tags:
        - Volumes
      responses:
        "200":
          description: |
            Returned all requested Volumes successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VolumeReadList"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      operationId: volumesPost
      summary: Create Volume
      security:
      - tokenAuth: []
      tags:
        - Volumes
      description: |
        Creates a new Volume.
        
        The full Volume needs to be provided to create the object.
        Optional data will be filled with defaults or left empty.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
      requestBody:
        description: Volume to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VolumeCreate"
      responses:
        "201":
          description: Volume successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VolumeRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /volumes/{volumeId}:
    get:
      operationId: volumesFindById
      summary: Retrieve Volume
      security:
      - tokenAuth: []
      tags:
        - Volumes
      description: Returns the Volume by ID.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: volumeId
          in: path
          schema:
            type: string
            format: uuid
          example: "21a4723d-bd52-5800-908d-d4fe55517b48"
          required: true
          description: The ID (UUID) of the Volume.
      responses:
        "200":
          description: Getting Volume was successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VolumeRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    put:
      operationId: volumesPut
      summary: Ensure Volume
      security:
      - tokenAuth: []
      tags:
        - Volumes
      description: |
        Ensures that the Volume with the provided ID is created or modified.
        The full Volume needs to be provided to ensure
        (either update or create) the Volume. Non present data will
        only be filled with defaults or left empty, but not take
        previous values into consideration.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: volumeId
          in: path
          schema:
            type: string
            format: uuid
          example: "21a4723d-bd52-5800-908d-d4fe55517b48"
          required: true
          description: The ID (UUID) of the Volume.
      requestBody:
        description: update Volume
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VolumeEnsure"
      responses:
        "200":
          description: Volume successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VolumeRead"
        "201":
          description: Volume successfully ensured.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VolumeRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "409":
          $ref: '#/components/responses/Conflict'
        "404":
          $ref: '#/components/responses/NotFound'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      operationId: volumesDelete
      summary: Delete Volume
      security:
      - tokenAuth: []
      tags:
        - Volumes
      description: Deletes the specified Volume.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: volumeId
          in: path
          schema:
            type: string
            format: uuid
          example: "21a4723d-bd52-5800-908d-d4fe55517b48"
          required: true
          description: The ID (UUID) of the Volume.
      responses:
        "202":
          description: Deleting Volume was successful.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /snapshots:
    get:
      operationId: snapshotsGet
      summary: Retrieve all Snapshots
      security:
      - tokenAuth: []
      description: |
        This endpoint enables retrieving all Snapshots using
        pagination and optional filters.
      parameters:
        - $ref: "#/components/parameters/paginationOffset"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/contractNumber"
        - $ref: "#/components/parameters/vpc"
        - $ref: "#/components/parameters/datacenter"
        - $ref: "#/components/parameters/server"
      tags:
        - Snapshots
      responses:
        "200":
          description: |
            Returned all requested Snapshots successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SnapshotReadList"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      operationId: snapshotsPost
      summary: Create Snapshot
      security:
      - tokenAuth: []
      tags:
        - Snapshots
      description: |
        Creates a new Snapshot.
        
        The full Snapshot needs to be provided to create the object.
        Optional data will be filled with defaults or left empty.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
      requestBody:
        description: Snapshot to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SnapshotCreate"
      responses:
        "201":
          description: Snapshot successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SnapshotRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /snapshots/{snapshotId}:
    get:
      operationId: snapshotsFindById
      summary: Retrieve Snapshot
      security:
      - tokenAuth: []
      tags:
        - Snapshots
      description: Returns the Snapshot by ID.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: snapshotId
          in: path
          schema:
            type: string
            format: uuid
          example: "a8784665-3d99-5464-af32-30a2967f58e7"
          required: true
          description: The ID (UUID) of the Snapshot.
      responses:
        "200":
          description: Getting Snapshot was successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SnapshotRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    put:
      operationId: snapshotsPut
      summary: Ensure Snapshot
      security:
      - tokenAuth: []
      tags:
        - Snapshots
      description: |
        Ensures that the Snapshot with the provided ID is created or modified.
        The full Snapshot needs to be provided to ensure
        (either update or create) the Snapshot. Non present data will
        only be filled with defaults or left empty, but not take
        previous values into consideration.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: snapshotId
          in: path
          schema:
            type: string
            format: uuid
          example: "a8784665-3d99-5464-af32-30a2967f58e7"
          required: true
          description: The ID (UUID) of the Snapshot.
      requestBody:
        description: update Snapshot
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SnapshotEnsure"
      responses:
        "200":
          description: Snapshot successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SnapshotRead"
        "201":
          description: Snapshot successfully ensured.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SnapshotRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "409":
          $ref: '#/components/responses/Conflict'
        "404":
          $ref: '#/components/responses/NotFound'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      operationId: snapshotsDelete
      summary: Delete Snapshot
      security:
      - tokenAuth: []
      tags:
        - Snapshots
      description: Deletes the specified Snapshot.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: snapshotId
          in: path
          schema:
            type: string
            format: uuid
          example: "a8784665-3d99-5464-af32-30a2967f58e7"
          required: true
          description: The ID (UUID) of the Snapshot.
      responses:
        "202":
          description: Deleting Snapshot was successful.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /nics:
    get:
      operationId: nicsGet
      summary: Retrieve all Network Interfaces
      security:
      - tokenAuth: []
      description: |
        This endpoint enables retrieving all Network Interfaces using
        pagination and optional filters.
      parameters:
        - $ref: "#/components/parameters/paginationOffset"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/contractNumber"
        - $ref: "#/components/parameters/vpc"
        - $ref: "#/components/parameters/datacenter"
        - $ref: "#/components/parameters/server"
        - $ref: "#/components/parameters/lan"
      tags:
        - Network Interfaces
      responses:
        "200":
          description: |
            Returned all requested Network Interfaces successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NicReadList"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      operationId: nicsPost
      summary: Create Nic
      security:
      - tokenAuth: []
      tags:
        - Network Interfaces
      description: |
        Creates a new Nic.
        
        The full Nic needs to be provided to create the object.
        Optional data will be filled with defaults or left empty.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
      requestBody:
        description: Nic to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NicCreate"
      responses:
        "201":
          description: Nic successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NicRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /nics/{nicId}:
    get:
      operationId: nicsFindById
      summary: Retrieve Nic
      security:
      - tokenAuth: []
      tags:
        - Network Interfaces
      description: Returns the Nic by ID.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: nicId
          in: path
          schema:
            type: string
            format: uuid
          example: "95e1de1e-dfe1-59f4-8da5-cb2ae5178fa9"
          required: true
          description: The ID (UUID) of the Nic.
      responses:
        "200":
          description: Getting Nic was successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NicRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    put:
      operationId: nicsPut
      summary: Ensure Nic
      security:
      - tokenAuth: []
      tags:
        - Network Interfaces
      description: |
        Ensures that the Nic with the provided ID is created or modified.
        The full Nic needs to be provided to ensure
        (either update or create) the Nic. Non present data will
        only be filled with defaults or left empty, but not take
        previous values into consideration.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: nicId
          in: path
          schema:
            type: string
            format: uuid
          example: "95e1de1e-dfe1-59f4-8da5-cb2ae5178fa9"
          required: true
          description: The ID (UUID) of the Nic.
      requestBody:
        description: update Nic
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NicEnsure"
      responses:
        "200":
          description: Nic successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NicRead"
        "201":
          description: Nic successfully ensured.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NicRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "409":
          $ref: '#/components/responses/Conflict'
        "404":
          $ref: '#/components/responses/NotFound'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      operationId: nicsDelete
      summary: Delete Nic
      security:
      - tokenAuth: []
      tags:
        - Network Interfaces
      description: Deletes the specified Nic.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: nicId
          in: path
          schema:
            type: string
            format: uuid
          example: "95e1de1e-dfe1-59f4-8da5-cb2ae5178fa9"
          required: true
          description: The ID (UUID) of the Nic.
      responses:
        "202":
          description: Deleting Nic was successful.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /lans:
    get:
      operationId: lansGet
      summary: Retrieve all Local Area Networks
      security:
      - tokenAuth: []
      description: |
        This endpoint enables retrieving all Local Area Networks using
        pagination and optional filters.
      parameters:
        - $ref: "#/components/parameters/paginationOffset"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/contractNumber"
        - $ref: "#/components/parameters/vpc"
        - $ref: "#/components/parameters/datacenter"
      tags:
        - Local Area Networks
      responses:
        "200":
          description: |
            Returned all requested Local Area Networks successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LanReadList"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      operationId: lansPost
      summary: Create Lan
      security:
      - tokenAuth: []
      tags:
        - Local Area Networks
      description: |
        Creates a new Lan.
        
        The full Lan needs to be provided to create the object.
        Optional data will be filled with defaults or left empty.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
      requestBody:
        description: Lan to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LanCreate"
      responses:
        "201":
          description: Lan successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LanRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /lans/{lanId}:
    get:
      operationId: lansFindById
      summary: Retrieve Lan
      security:
      - tokenAuth: []
      tags:
        - Local Area Networks
      description: Returns the Lan by ID.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: lanId
          in: path
          schema:
            type: string
            format: uuid
          example: "3d52d3ec-da61-5b48-878e-461d604debdb"
          required: true
          description: The ID (UUID) of the Lan.
      responses:
        "200":
          description: Getting Lan was successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LanRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    put:
      operationId: lansPut
      summary: Ensure Lan
      security:
      - tokenAuth: []
      tags:
        - Local Area Networks
      description: |
        Ensures that the Lan with the provided ID is created or modified.
        The full Lan needs to be provided to ensure
        (either update or create) the Lan. Non present data will
        only be filled with defaults or left empty, but not take
        previous values into consideration.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: lanId
          in: path
          schema:
            type: string
            format: uuid
          example: "3d52d3ec-da61-5b48-878e-461d604debdb"
          required: true
          description: The ID (UUID) of the Lan.
      requestBody:
        description: update Lan
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LanEnsure"
      responses:
        "200":
          description: Lan successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LanRead"
        "201":
          description: Lan successfully ensured.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LanRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "409":
          $ref: '#/components/responses/Conflict'
        "404":
          $ref: '#/components/responses/NotFound'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      operationId: lansDelete
      summary: Delete Lan
      security:
      - tokenAuth: []
      tags:
        - Local Area Networks
      description: Deletes the specified Lan.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: lanId
          in: path
          schema:
            type: string
            format: uuid
          example: "3d52d3ec-da61-5b48-878e-461d604debdb"
          required: true
          description: The ID (UUID) of the Lan.
      responses:
        "202":
          description: Deleting Lan was successful.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /flowlogs:
    get:
      operationId: flowlogsGet
      summary: Retrieve all Flow Logs
      security:
      - tokenAuth: []
      description: |
        This endpoint enables retrieving all Flow Logs using
        pagination and optional filters.
      parameters:
        - $ref: "#/components/parameters/paginationOffset"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/contractNumber"
        - $ref: "#/components/parameters/vpc"
        - $ref: "#/components/parameters/datacenter"
        - $ref: "#/components/parameters/server"
        - $ref: "#/components/parameters/nic"
      tags:
        - Flow Logs
      responses:
        "200":
          description: |
            Returned all requested Flow Logs successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowLogReadList"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      operationId: flowlogsPost
      summary: Create FlowLog
      security:
      - tokenAuth: []
      tags:
        - Flow Logs
      description: |
        Creates a new FlowLog.
        
        The full FlowLog needs to be provided to create the object.
        Optional data will be filled with defaults or left empty.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
      requestBody:
        description: FlowLog to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FlowLogCreate"
      responses:
        "201":
          description: FlowLog successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowLogRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /flowlogs/{flowlogId}:
    get:
      operationId: flowlogsFindById
      summary: Retrieve FlowLog
      security:
      - tokenAuth: []
      tags:
        - Flow Logs
      description: Returns the FlowLog by ID.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: flowlogId
          in: path
          schema:
            type: string
            format: uuid
          example: "8ef19972-2ea3-5618-8455-0c04a6051f58"
          required: true
          description: The ID (UUID) of the FlowLog.
      responses:
        "200":
          description: Getting FlowLog was successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowLogRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    put:
      operationId: flowlogsPut
      summary: Ensure FlowLog
      security:
      - tokenAuth: []
      tags:
        - Flow Logs
      description: |
        Ensures that the FlowLog with the provided ID is created or modified.
        The full FlowLog needs to be provided to ensure
        (either update or create) the FlowLog. Non present data will
        only be filled with defaults or left empty, but not take
        previous values into consideration.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: flowlogId
          in: path
          schema:
            type: string
            format: uuid
          example: "8ef19972-2ea3-5618-8455-0c04a6051f58"
          required: true
          description: The ID (UUID) of the FlowLog.
      requestBody:
        description: update FlowLog
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FlowLogEnsure"
      responses:
        "200":
          description: FlowLog successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowLogRead"
        "201":
          description: FlowLog successfully ensured.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowLogRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "409":
          $ref: '#/components/responses/Conflict'
        "404":
          $ref: '#/components/responses/NotFound'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      operationId: flowlogsDelete
      summary: Delete FlowLog
      security:
      - tokenAuth: []
      tags:
        - Flow Logs
      description: Deletes the specified FlowLog.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: flowlogId
          in: path
          schema:
            type: string
            format: uuid
          example: "8ef19972-2ea3-5618-8455-0c04a6051f58"
          required: true
          description: The ID (UUID) of the FlowLog.
      responses:
        "202":
          description: Deleting FlowLog was successful.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /nacls:
    get:
      operationId: naclsGet
      summary: Retrieve all Network ACLs
      security:
      - tokenAuth: []
      description: |
        This endpoint enables retrieving all Network ACLs using
        pagination and optional filters.
      parameters:
        - $ref: "#/components/parameters/paginationOffset"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/contractNumber"
        - $ref: "#/components/parameters/vpc"
      tags:
        - Network ACLs
      responses:
        "200":
          description: |
            Returned all requested Network ACLs successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NetworkAclReadList"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      operationId: naclsPost
      summary: Create NetworkAcl
      security:
      - tokenAuth: []
      tags:
        - Network ACLs
      description: |
        Creates a new NetworkAcl.
        
        The full NetworkAcl needs to be provided to create the object.
        Optional data will be filled with defaults or left empty.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
      requestBody:
        description: NetworkAcl to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NetworkAclCreate"
      responses:
        "201":
          description: NetworkAcl successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NetworkAclRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /nacls/{naclId}:
    get:
      operationId: naclsFindById
      summary: Retrieve NetworkAcl
      security:
      - tokenAuth: []
      tags:
        - Network ACLs
      description: Returns the NetworkAcl by ID.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: naclId
          in: path
          schema:
            type: string
            format: uuid
          example: "f187bce3-4b78-59de-a3e7-10f2b61ad742"
          required: true
          description: The ID (UUID) of the NetworkAcl.
      responses:
        "200":
          description: Getting NetworkAcl was successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NetworkAclRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    put:
      operationId: naclsPut
      summary: Ensure NetworkAcl
      security:
      - tokenAuth: []
      tags:
        - Network ACLs
      description: |
        Ensures that the NetworkAcl with the provided ID is created or modified.
        The full NetworkAcl needs to be provided to ensure
        (either update or create) the NetworkAcl. Non present data will
        only be filled with defaults or left empty, but not take
        previous values into consideration.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: naclId
          in: path
          schema:
            type: string
            format: uuid
          example: "f187bce3-4b78-59de-a3e7-10f2b61ad742"
          required: true
          description: The ID (UUID) of the NetworkAcl.
      requestBody:
        description: update NetworkAcl
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NetworkAclEnsure"
      responses:
        "200":
          description: NetworkAcl successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NetworkAclRead"
        "201":
          description: NetworkAcl successfully ensured.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NetworkAclRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "409":
          $ref: '#/components/responses/Conflict'
        "404":
          $ref: '#/components/responses/NotFound'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      operationId: naclsDelete
      summary: Delete NetworkAcl
      security:
      - tokenAuth: []
      tags:
        - Network ACLs
      description: Deletes the specified NetworkAcl.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: naclId
          in: path
          schema:
            type: string
            format: uuid
          example: "f187bce3-4b78-59de-a3e7-10f2b61ad742"
          required: true
          description: The ID (UUID) of the NetworkAcl.
      responses:
        "202":
          description: Deleting NetworkAcl was successful.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /naclrules:
    get:
      operationId: naclrulesGet
      summary: Retrieve all Network ACL Rules
      security:
      - tokenAuth: []
      description: |
        This endpoint enables retrieving all Network ACL Rules using
        pagination and optional filters.
      parameters:
        - $ref: "#/components/parameters/paginationOffset"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/contractNumber"
        - $ref: "#/components/parameters/vpc"
        - $ref: "#/components/parameters/nacl"
      tags:
        - Network ACL Rules
      responses:
        "200":
          description: |
            Returned all requested Network ACL Rules successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NetworkAclRuleReadList"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      operationId: naclrulesPost
      summary: Create NetworkAclRule
      security:
      - tokenAuth: []
      tags:
        - Network ACL Rules
      description: |
        Creates a new NetworkAclRule.
        
        The full NetworkAclRule needs to be provided to create the object.
        Optional data will be filled with defaults or left empty.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
      requestBody:
        description: NetworkAclRule to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NetworkAclRuleCreate"
      responses:
        "201":
          description: NetworkAclRule successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NetworkAclRuleRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /naclrules/{naclruleId}:
    get:
      operationId: naclrulesFindById
      summary: Retrieve NetworkAclRule
      security:
      - tokenAuth: []
      tags:
        - Network ACL Rules
      description: Returns the NetworkAclRule by ID.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: naclruleId
          in: path
          schema:
            type: string
            format: uuid
          example: "e775ab89-71e0-50e9-a7ab-db818d4323e7"
          required: true
          description: The ID (UUID) of the NetworkAclRule.
      responses:
        "200":
          description: Getting NetworkAclRule was successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NetworkAclRuleRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    put:
      operationId: naclrulesPut
      summary: Ensure NetworkAclRule
      security:
      - tokenAuth: []
      tags:
        - Network ACL Rules
      description: |
        Ensures that the NetworkAclRule with the provided ID is created or modified.
        The full NetworkAclRule needs to be provided to ensure
        (either update or create) the NetworkAclRule. Non present data will
        only be filled with defaults or left empty, but not take
        previous values into consideration.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: naclruleId
          in: path
          schema:
            type: string
            format: uuid
          example: "e775ab89-71e0-50e9-a7ab-db818d4323e7"
          required: true
          description: The ID (UUID) of the NetworkAclRule.
      requestBody:
        description: update NetworkAclRule
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NetworkAclRuleEnsure"
      responses:
        "200":
          description: NetworkAclRule successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NetworkAclRuleRead"
        "201":
          description: NetworkAclRule successfully ensured.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NetworkAclRuleRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "409":
          $ref: '#/components/responses/Conflict'
        "404":
          $ref: '#/components/responses/NotFound'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      operationId: naclrulesDelete
      summary: Delete NetworkAclRule
      security:
      - tokenAuth: []
      tags:
        - Network ACL Rules
      description: Deletes the specified NetworkAclRule.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: naclruleId
          in: path
          schema:
            type: string
            format: uuid
          example: "e775ab89-71e0-50e9-a7ab-db818d4323e7"
          required: true
          description: The ID (UUID) of the NetworkAclRule.
      responses:
        "202":
          description: Deleting NetworkAclRule was successful.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /routetables:
    get:
      operationId: routetablesGet
      summary: Retrieve all Route Tables
      security:
      - tokenAuth: []
      description: |
        This endpoint enables retrieving all Route Tables using
        pagination and optional filters.
      parameters:
        - $ref: "#/components/parameters/paginationOffset"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/contractNumber"
      tags:
        - Route Tables
      responses:
        "200":
          description: |
            Returned all requested Route Tables successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RouteTableReadList"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      operationId: routetablesPost
      summary: Create RouteTable
      security:
      - tokenAuth: []
      tags:
        - Route Tables
      description: |
        Creates a new RouteTable.
        
        The full RouteTable needs to be provided to create the object.
        Optional data will be filled with defaults or left empty.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
      requestBody:
        description: RouteTable to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RouteTableCreate"
      responses:
        "201":
          description: RouteTable successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RouteTableRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /routetables/{routetableId}:
    get:
      operationId: routetablesFindById
      summary: Retrieve RouteTable
      security:
      - tokenAuth: []
      tags:
        - Route Tables
      description: Returns the RouteTable by ID.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: routetableId
          in: path
          schema:
            type: string
            format: uuid
          example: "82525854-b4ab-5360-b28b-174476941c7f"
          required: true
          description: The ID (UUID) of the RouteTable.
      responses:
        "200":
          description: Getting RouteTable was successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RouteTableRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    put:
      operationId: routetablesPut
      summary: Ensure RouteTable
      security:
      - tokenAuth: []
      tags:
        - Route Tables
      description: |
        Ensures that the RouteTable with the provided ID is created or modified.
        The full RouteTable needs to be provided to ensure
        (either update or create) the RouteTable. Non present data will
        only be filled with defaults or left empty, but not take
        previous values into consideration.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: routetableId
          in: path
          schema:
            type: string
            format: uuid
          example: "82525854-b4ab-5360-b28b-174476941c7f"
          required: true
          description: The ID (UUID) of the RouteTable.
      requestBody:
        description: update RouteTable
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RouteTableEnsure"
      responses:
        "200":
          description: RouteTable successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RouteTableRead"
        "201":
          description: RouteTable successfully ensured.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RouteTableRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "409":
          $ref: '#/components/responses/Conflict'
        "404":
          $ref: '#/components/responses/NotFound'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      operationId: routetablesDelete
      summary: Delete RouteTable
      security:
      - tokenAuth: []
      tags:
        - Route Tables
      description: Deletes the specified RouteTable.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: routetableId
          in: path
          schema:
            type: string
            format: uuid
          example: "82525854-b4ab-5360-b28b-174476941c7f"
          required: true
          description: The ID (UUID) of the RouteTable.
      responses:
        "202":
          description: Deleting RouteTable was successful.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /routes:
    get:
      operationId: routesGet
      summary: Retrieve all Routes
      security:
      - tokenAuth: []
      description: |
        This endpoint enables retrieving all Routes using
        pagination and optional filters.
      parameters:
        - $ref: "#/components/parameters/paginationOffset"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/contractNumber"
        - $ref: "#/components/parameters/vpc"
        - $ref: "#/components/parameters/datacenter"
        - $ref: "#/components/parameters/routetable"
      tags:
        - Routes
      responses:
        "200":
          description: |
            Returned all requested Routes successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RouteReadList"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      operationId: routesPost
      summary: Create Route
      security:
      - tokenAuth: []
      tags:
        - Routes
      description: |
        Creates a new Route.
        
        The full Route needs to be provided to create the object.
        Optional data will be filled with defaults or left empty.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
      requestBody:
        description: Route to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RouteCreate"
      responses:
        "201":
          description: Route successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RouteRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /routes/{routeId}:
    get:
      operationId: routesFindById
      summary: Retrieve Route
      security:
      - tokenAuth: []
      tags:
        - Routes
      description: Returns the Route by ID.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: routeId
          in: path
          schema:
            type: string
            format: uuid
          example: "50982018-bb17-5cb9-bcd4-97f8bbc7dc23"
          required: true
          description: The ID (UUID) of the Route.
      responses:
        "200":
          description: Getting Route was successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RouteRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    put:
      operationId: routesPut
      summary: Ensure Route
      security:
      - tokenAuth: []
      tags:
        - Routes
      description: |
        Ensures that the Route with the provided ID is created or modified.
        The full Route needs to be provided to ensure
        (either update or create) the Route. Non present data will
        only be filled with defaults or left empty, but not take
        previous values into consideration.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: routeId
          in: path
          schema:
            type: string
            format: uuid
          example: "50982018-bb17-5cb9-bcd4-97f8bbc7dc23"
          required: true
          description: The ID (UUID) of the Route.
      requestBody:
        description: update Route
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RouteEnsure"
      responses:
        "200":
          description: Route successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RouteRead"
        "201":
          description: Route successfully ensured.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RouteRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "409":
          $ref: '#/components/responses/Conflict'
        "404":
          $ref: '#/components/responses/NotFound'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      operationId: routesDelete
      summary: Delete Route
      security:
      - tokenAuth: []
      tags:
        - Routes
      description: Deletes the specified Route.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: routeId
          in: path
          schema:
            type: string
            format: uuid
          example: "50982018-bb17-5cb9-bcd4-97f8bbc7dc23"
          required: true
          description: The ID (UUID) of the Route.
      responses:
        "202":
          description: Deleting Route was successful.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /securitygroups:
    get:
      operationId: securitygroupsGet
      summary: Retrieve all Security Groups
      security:
      - tokenAuth: []
      description: |
        This endpoint enables retrieving all Security Groups using
        pagination and optional filters.
      parameters:
        - $ref: "#/components/parameters/paginationOffset"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/contractNumber"
        - $ref: "#/components/parameters/vpc"
        - $ref: "#/components/parameters/datacenter"
      tags:
        - Security Groups
      responses:
        "200":
          description: |
            Returned all requested Security Groups successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityGroupReadList"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      operationId: securitygroupsPost
      summary: Create SecurityGroup
      security:
      - tokenAuth: []
      tags:
        - Security Groups
      description: |
        Creates a new SecurityGroup.
        
        The full SecurityGroup needs to be provided to create the object.
        Optional data will be filled with defaults or left empty.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
      requestBody:
        description: SecurityGroup to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SecurityGroupCreate"
      responses:
        "201":
          description: SecurityGroup successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityGroupRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /securitygroups/{securitygroupId}:
    get:
      operationId: securitygroupsFindById
      summary: Retrieve SecurityGroup
      security:
      - tokenAuth: []
      tags:
        - Security Groups
      description: Returns the SecurityGroup by ID.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: securitygroupId
          in: path
          schema:
            type: string
            format: uuid
          example: "f2966c32-28d2-5a3f-9356-979d5ce2bf5d"
          required: true
          description: The ID (UUID) of the SecurityGroup.
      responses:
        "200":
          description: Getting SecurityGroup was successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityGroupRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    put:
      operationId: securitygroupsPut
      summary: Ensure SecurityGroup
      security:
      - tokenAuth: []
      tags:
        - Security Groups
      description: |
        Ensures that the SecurityGroup with the provided ID is created or modified.
        The full SecurityGroup needs to be provided to ensure
        (either update or create) the SecurityGroup. Non present data will
        only be filled with defaults or left empty, but not take
        previous values into consideration.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: securitygroupId
          in: path
          schema:
            type: string
            format: uuid
          example: "f2966c32-28d2-5a3f-9356-979d5ce2bf5d"
          required: true
          description: The ID (UUID) of the SecurityGroup.
      requestBody:
        description: update SecurityGroup
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SecurityGroupEnsure"
      responses:
        "200":
          description: SecurityGroup successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityGroupRead"
        "201":
          description: SecurityGroup successfully ensured.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityGroupRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "409":
          $ref: '#/components/responses/Conflict'
        "404":
          $ref: '#/components/responses/NotFound'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      operationId: securitygroupsDelete
      summary: Delete SecurityGroup
      security:
      - tokenAuth: []
      tags:
        - Security Groups
      description: Deletes the specified SecurityGroup.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: securitygroupId
          in: path
          schema:
            type: string
            format: uuid
          example: "f2966c32-28d2-5a3f-9356-979d5ce2bf5d"
          required: true
          description: The ID (UUID) of the SecurityGroup.
      responses:
        "202":
          description: Deleting SecurityGroup was successful.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /securitygrouprules:
    get:
      operationId: securitygrouprulesGet
      summary: Retrieve all Security Group Rules
      security:
      - tokenAuth: []
      description: |
        This endpoint enables retrieving all Security Group Rules using
        pagination and optional filters.
      parameters:
        - $ref: "#/components/parameters/paginationOffset"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/contractNumber"
        - $ref: "#/components/parameters/vpc"
        - $ref: "#/components/parameters/datacenter"
        - $ref: "#/components/parameters/securitygroup"
      tags:
        - Security Group Rules
      responses:
        "200":
          description: |
            Returned all requested Security Group Rules successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityGroupRuleReadList"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      operationId: securitygrouprulesPost
      summary: Create SecurityGroupRule
      security:
      - tokenAuth: []
      tags:
        - Security Group Rules
      description: |
        Creates a new SecurityGroupRule.
        
        The full SecurityGroupRule needs to be provided to create the object.
        Optional data will be filled with defaults or left empty.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
      requestBody:
        description: SecurityGroupRule to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SecurityGroupRuleCreate"
      responses:
        "201":
          description: SecurityGroupRule successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityGroupRuleRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /securitygrouprules/{securitygroupruleId}:
    get:
      operationId: securitygrouprulesFindById
      summary: Retrieve SecurityGroupRule
      security:
      - tokenAuth: []
      tags:
        - Security Group Rules
      description: Returns the SecurityGroupRule by ID.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: securitygroupruleId
          in: path
          schema:
            type: string
            format: uuid
          example: "37fa64f3-2ac2-5ae8-850d-63e3d9bd4cad"
          required: true
          description: The ID (UUID) of the SecurityGroupRule.
      responses:
        "200":
          description: Getting SecurityGroupRule was successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityGroupRuleRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    put:
      operationId: securitygrouprulesPut
      summary: Ensure SecurityGroupRule
      security:
      - tokenAuth: []
      tags:
        - Security Group Rules
      description: |
        Ensures that the SecurityGroupRule with the provided ID is created or modified.
        The full SecurityGroupRule needs to be provided to ensure
        (either update or create) the SecurityGroupRule. Non present data will
        only be filled with defaults or left empty, but not take
        previous values into consideration.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: securitygroupruleId
          in: path
          schema:
            type: string
            format: uuid
          example: "37fa64f3-2ac2-5ae8-850d-63e3d9bd4cad"
          required: true
          description: The ID (UUID) of the SecurityGroupRule.
      requestBody:
        description: update SecurityGroupRule
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SecurityGroupRuleEnsure"
      responses:
        "200":
          description: SecurityGroupRule successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityGroupRuleRead"
        "201":
          description: SecurityGroupRule successfully ensured.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityGroupRuleRead"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "409":
          $ref: '#/components/responses/Conflict'
        "404":
          $ref: '#/components/responses/NotFound'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      operationId: securitygrouprulesDelete
      summary: Delete SecurityGroupRule
      security:
      - tokenAuth: []
      tags:
        - Security Group Rules
      description: Deletes the specified SecurityGroupRule.
      parameters:
        - $ref: "#/components/parameters/contractNumber"
        - name: securitygroupruleId
          in: path
          schema:
            type: string
            format: uuid
          example: "37fa64f3-2ac2-5ae8-850d-63e3d9bd4cad"
          required: true
          description: The ID (UUID) of the SecurityGroupRule.
      responses:
        "202":
          description: Deleting SecurityGroupRule was successful.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /servers/{serverId}/operations:
    post:
      operationId: serversOperationsPost
      summary: Post ServerOperation
      security:
        - tokenAuth: []
      tags:
        - Operations
      description: |
        Post the operation ServerOperation with the provided ID and tag.
      parameters:
        - name: serverId
          in: path
          schema:
            type: string
            format: uuid
          example: "0eade904-be77-54cf-ba4d-ac05a6562116"
          required: true
          description: The ID (UUID) of the ServerOperation.
        - $ref: "#/components/parameters/contractNumber"
      requestBody:
        description: update ServerOperation
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServerOperation"
      responses:
        "201":
          description: ServerOperation successfully sent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerOperationResponse"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "409":
          $ref: '#/components/responses/Conflict'
        "404":
          $ref: '#/components/responses/NotFound'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /volumes/{volumeId}/operations:
    post:
      operationId: volumesOperationsPost
      summary: Post VolumeOperation
      security:
        - tokenAuth: []
      tags:
        - Operations
      description: |
        Post the operation VolumeOperation with the provided ID and tag.
      parameters:
        - name: volumeId
          in: path
          schema:
            type: string
            format: uuid
          example: "b7e64e54-4d4e-5634-85f3-e2d2e61ad7f6"
          required: true
          description: The ID (UUID) of the VolumeOperation.
        - $ref: "#/components/parameters/contractNumber"
      requestBody:
        description: update VolumeOperation
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VolumeOperation"
      responses:
        "201":
          description: VolumeOperation successfully sent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VolumeOperationResponse"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/NotAllowed'
        "409":
          $ref: '#/components/responses/Conflict'
        "404":
          $ref: '#/components/responses/NotFound'
        "415":
          $ref: '#/components/responses/UnsupportedMediaType'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/UnexpectedError'
components:
  schemas:
    LocationReadList:
      allOf:
      - type: object
        required:
        - id
        - type
        - href
        properties:
          id:
            description: ID of the list of Location resources.
            type: string
            format: uuid
            example: aac85277-e672-55ff-8ba9-e9925612f7a6
          type:
            description: The type of the resource.
            type: string
            enum:
            - collection
          href:
            description: The URL of the list of Location resources.
            type: string
            example: /locations
          items:
            description: The list of Location resources.
            type: array
            items:
              $ref: '#/components/schemas/LocationRead'
      - $ref: '#/components/schemas/Pagination'
    LocationRead:
      type: object
      required:
      - id
      - type
      - href
      - metadata
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the Location.
          format: uuid
          example: "f59e4bc2-6aff-5ecc-b745-321db2fdd071"
        type:
          description: The type of the resource.
          type: string
          enum:
          - location
        href:
          description: The URL of the Location.
          type: string
          example: /locations/f59e4bc2-6aff-5ecc-b745-321db2fdd071
        metadata:
          $ref: '#/components/schemas/Metadata'
        properties:
          $ref: '#/components/schemas/Location'
    TemplateReadList:
      allOf:
      - type: object
        required:
        - id
        - type
        - href
        properties:
          id:
            description: ID of the list of Template resources.
            type: string
            format: uuid
            example: 49acfe43-b021-5d78-ad46-33d9b7215a0c
          type:
            description: The type of the resource.
            type: string
            enum:
            - collection
          href:
            description: The URL of the list of Template resources.
            type: string
            example: /templates
          items:
            description: The list of Template resources.
            type: array
            items:
              $ref: '#/components/schemas/TemplateRead'
      - $ref: '#/components/schemas/Pagination'
    TemplateRead:
      type: object
      required:
      - id
      - type
      - href
      - metadata
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the Template.
          format: uuid
          example: "5afb3086-5b37-5cc0-b126-075231c7bcb6"
        type:
          description: The type of the resource.
          type: string
          enum:
          - template
        href:
          description: The URL of the Template.
          type: string
          example: /templates/5afb3086-5b37-5cc0-b126-075231c7bcb6
        metadata:
          $ref: '#/components/schemas/Metadata'
        properties:
          $ref: '#/components/schemas/Template'
    IpBlockReadList:
      allOf:
      - type: object
        required:
        - id
        - type
        - href
        properties:
          id:
            description: ID of the list of IpBlock resources.
            type: string
            format: uuid
            example: 5b7131b8-7ab5-5840-b7ee-162a5dd3c492
          type:
            description: The type of the resource.
            type: string
            enum:
            - collection
          href:
            description: The URL of the list of IpBlock resources.
            type: string
            example: /ipblocks
          items:
            description: The list of IpBlock resources.
            type: array
            items:
              $ref: '#/components/schemas/IpBlockRead'
      - $ref: '#/components/schemas/Pagination'
    IpBlockRead:
      type: object
      required:
      - id
      - type
      - href
      - metadata
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the IpBlock.
          format: uuid
          example: "a480b1c3-c104-589b-b1d4-e181f1d25069"
        type:
          description: The type of the resource.
          type: string
          enum:
          - ipblock
        href:
          description: The URL of the IpBlock.
          type: string
          example: /ipblocks/a480b1c3-c104-589b-b1d4-e181f1d25069
        metadata:
          $ref: '#/components/schemas/ElementMetadata'
        properties:
          $ref: '#/components/schemas/IpBlock'
    IpBlockEnsure:
      type: object
      required:
      - id
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the IpBlock.
          format: uuid
          example: "a480b1c3-c104-589b-b1d4-e181f1d25069"
        metadata:
          description: Metadata
          additionalProperties: true
          example: {}
        properties:
          $ref: '#/components/schemas/IpBlock'
    IpBlockCreate:
      type: object
      required:
      - properties
      properties:
        metadata:
          description: Metadata
          additionalProperties: true
          example: {}
        properties:
          $ref: '#/components/schemas/IpBlock'
    ImageReadList:
      allOf:
      - type: object
        required:
        - id
        - type
        - href
        properties:
          id:
            description: ID of the list of Image resources.
            type: string
            format: uuid
            example: 6e8d5f3e-dca1-5a0a-87f1-c8f9753ffa8a
          type:
            description: The type of the resource.
            type: string
            enum:
            - collection
          href:
            description: The URL of the list of Image resources.
            type: string
            example: /images
          items:
            description: The list of Image resources.
            type: array
            items:
              $ref: '#/components/schemas/ImageRead'
      - $ref: '#/components/schemas/Pagination'
    ImageRead:
      type: object
      required:
      - id
      - type
      - href
      - metadata
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the Image.
          format: uuid
          example: "78916e89-f0ed-5816-b86d-5e55b6f2a884"
        type:
          description: The type of the resource.
          type: string
          enum:
          - image
        href:
          description: The URL of the Image.
          type: string
          example: /images/78916e89-f0ed-5816-b86d-5e55b6f2a884
        metadata:
          $ref: '#/components/schemas/ElementMetadata'
        properties:
          $ref: '#/components/schemas/Image'
    ImageEnsure:
      type: object
      required:
      - id
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the Image.
          format: uuid
          example: "78916e89-f0ed-5816-b86d-5e55b6f2a884"
        metadata:
          description: Metadata
          additionalProperties: true
          example: {}
        properties:
          $ref: '#/components/schemas/Image'
    VpcReadList:
      allOf:
      - type: object
        required:
        - id
        - type
        - href
        properties:
          id:
            description: ID of the list of Vpc resources.
            type: string
            format: uuid
            example: e4d59efb-bffd-5f44-bd9a-b146ad0c2d77
          type:
            description: The type of the resource.
            type: string
            enum:
            - collection
          href:
            description: The URL of the list of Vpc resources.
            type: string
            example: /vpcs
          items:
            description: The list of Vpc resources.
            type: array
            items:
              $ref: '#/components/schemas/VpcRead'
      - $ref: '#/components/schemas/Pagination'
    VpcRead:
      type: object
      required:
      - id
      - type
      - href
      - metadata
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the Vpc.
          format: uuid
          example: "e50a7f27-79ce-53c6-8c2a-661949161972"
        type:
          description: The type of the resource.
          type: string
          enum:
          - vpc
        href:
          description: The URL of the Vpc.
          type: string
          example: /vpcs/e50a7f27-79ce-53c6-8c2a-661949161972
        metadata:
          $ref: '#/components/schemas/ElementMetadata'
        properties:
          $ref: '#/components/schemas/Vpc'
    VpcEnsure:
      type: object
      required:
      - id
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the Vpc.
          format: uuid
          example: "e50a7f27-79ce-53c6-8c2a-661949161972"
        metadata:
          description: Metadata
          additionalProperties: true
          example: {}
        properties:
          $ref: '#/components/schemas/Vpc'
    VpcCreate:
      type: object
      required:
      - properties
      properties:
        metadata:
          description: Metadata
          additionalProperties: true
          example: {}
        properties:
          $ref: '#/components/schemas/Vpc'
    DatacenterReadList:
      allOf:
      - type: object
        required:
        - id
        - type
        - href
        properties:
          id:
            description: ID of the list of Datacenter resources.
            type: string
            format: uuid
            example: f6ebba96-00d9-5acc-8454-d6213506c2ca
          type:
            description: The type of the resource.
            type: string
            enum:
            - collection
          href:
            description: The URL of the list of Datacenter resources.
            type: string
            example: /datacenters
          items:
            description: The list of Datacenter resources.
            type: array
            items:
              $ref: '#/components/schemas/DatacenterRead'
      - $ref: '#/components/schemas/Pagination'
    DatacenterRead:
      type: object
      required:
      - id
      - type
      - href
      - metadata
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the Datacenter.
          format: uuid
          example: "d6e4e4d9-e542-5089-96c6-0087a38fda91"
        type:
          description: The type of the resource.
          type: string
          enum:
          - datacenter
        href:
          description: The URL of the Datacenter.
          type: string
          example: /datacenters/d6e4e4d9-e542-5089-96c6-0087a38fda91
        metadata:
          $ref: '#/components/schemas/ElementMetadata'
        properties:
          $ref: '#/components/schemas/Datacenter'
    DatacenterEnsure:
      type: object
      required:
      - id
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the Datacenter.
          format: uuid
          example: "d6e4e4d9-e542-5089-96c6-0087a38fda91"
        metadata:
          description: Metadata
          additionalProperties: true
          example: {}
        properties:
          $ref: '#/components/schemas/Datacenter'
    DatacenterCreate:
      type: object
      required:
      - properties
      properties:
        metadata:
          description: Metadata
          additionalProperties: true
          example: {}
        properties:
          $ref: '#/components/schemas/Datacenter'
    ServerReadList:
      allOf:
      - type: object
        required:
        - id
        - type
        - href
        properties:
          id:
            description: ID of the list of Server resources.
            type: string
            format: uuid
            example: 70330e63-425b-597f-91d7-f86c030a6a30
          type:
            description: The type of the resource.
            type: string
            enum:
            - collection
          href:
            description: The URL of the list of Server resources.
            type: string
            example: /servers
          items:
            description: The list of Server resources.
            type: array
            items:
              $ref: '#/components/schemas/ServerRead'
      - $ref: '#/components/schemas/Pagination'
    ServerRead:
      type: object
      required:
      - id
      - type
      - href
      - metadata
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the Server.
          format: uuid
          example: "10ac0074-96c1-5d50-8852-81bd6272cb18"
        type:
          description: The type of the resource.
          type: string
          enum:
          - server
        href:
          description: The URL of the Server.
          type: string
          example: /servers/10ac0074-96c1-5d50-8852-81bd6272cb18
        metadata:
          $ref: '#/components/schemas/ElementMetadata'
        properties:
          $ref: '#/components/schemas/Server'
    ServerEnsure:
      type: object
      required:
      - id
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the Server.
          format: uuid
          example: "10ac0074-96c1-5d50-8852-81bd6272cb18"
        metadata:
          description: Metadata
          additionalProperties: true
          example: {}
        properties:
          $ref: '#/components/schemas/Server'
    ServerCreate:
      type: object
      required:
      - properties
      properties:
        metadata:
          description: Metadata
          additionalProperties: true
          example: {}
        properties:
          $ref: '#/components/schemas/Server'
    VolumeReadList:
      allOf:
      - type: object
        required:
        - id
        - type
        - href
        properties:
          id:
            description: ID of the list of Volume resources.
            type: string
            format: uuid
            example: 4da5de3a-bebb-51b2-96a8-694a89c1b1e0
          type:
            description: The type of the resource.
            type: string
            enum:
            - collection
          href:
            description: The URL of the list of Volume resources.
            type: string
            example: /volumes
          items:
            description: The list of Volume resources.
            type: array
            items:
              $ref: '#/components/schemas/VolumeRead'
      - $ref: '#/components/schemas/Pagination'
    VolumeRead:
      type: object
      required:
      - id
      - type
      - href
      - metadata
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the Volume.
          format: uuid
          example: "21a4723d-bd52-5800-908d-d4fe55517b48"
        type:
          description: The type of the resource.
          type: string
          enum:
          - volume
        href:
          description: The URL of the Volume.
          type: string
          example: /volumes/21a4723d-bd52-5800-908d-d4fe55517b48
        metadata:
          $ref: '#/components/schemas/ElementMetadata'
        properties:
          $ref: '#/components/schemas/Volume'
    VolumeEnsure:
      type: object
      required:
      - id
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the Volume.
          format: uuid
          example: "21a4723d-bd52-5800-908d-d4fe55517b48"
        metadata:
          description: Metadata
          additionalProperties: true
          example: {}
        properties:
          $ref: '#/components/schemas/Volume'
    VolumeCreate:
      type: object
      required:
      - properties
      properties:
        metadata:
          description: Metadata
          additionalProperties: true
          example: {}
        properties:
          $ref: '#/components/schemas/Volume'
    SnapshotReadList:
      allOf:
      - type: object
        required:
        - id
        - type
        - href
        properties:
          id:
            description: ID of the list of Snapshot resources.
            type: string
            format: uuid
            example: b9cb6c65-8997-58bb-b7d1-93e5da5a6525
          type:
            description: The type of the resource.
            type: string
            enum:
            - collection
          href:
            description: The URL of the list of Snapshot resources.
            type: string
            example: /snapshots
          items:
            description: The list of Snapshot resources.
            type: array
            items:
              $ref: '#/components/schemas/SnapshotRead'
      - $ref: '#/components/schemas/Pagination'
    SnapshotRead:
      type: object
      required:
      - id
      - type
      - href
      - metadata
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the Snapshot.
          format: uuid
          example: "a8784665-3d99-5464-af32-30a2967f58e7"
        type:
          description: The type of the resource.
          type: string
          enum:
          - snapshot
        href:
          description: The URL of the Snapshot.
          type: string
          example: /snapshots/a8784665-3d99-5464-af32-30a2967f58e7
        metadata:
          $ref: '#/components/schemas/ElementMetadata'
        properties:
          $ref: '#/components/schemas/Snapshot'
    SnapshotEnsure:
      type: object
      required:
      - id
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the Snapshot.
          format: uuid
          example: "a8784665-3d99-5464-af32-30a2967f58e7"
        metadata:
          description: Metadata
          additionalProperties: true
          example: {}
        properties:
          $ref: '#/components/schemas/Snapshot'
    SnapshotCreate:
      type: object
      required:
      - properties
      properties:
        metadata:
          description: Metadata
          additionalProperties: true
          example: {}
        properties:
          $ref: '#/components/schemas/Snapshot'
    NicReadList:
      allOf:
      - type: object
        required:
        - id
        - type
        - href
        properties:
          id:
            description: ID of the list of Nic resources.
            type: string
            format: uuid
            example: 8d204bd4-3423-5f87-aa0c-a91c4def4b88
          type:
            description: The type of the resource.
            type: string
            enum:
            - collection
          href:
            description: The URL of the list of Nic resources.
            type: string
            example: /nics
          items:
            description: The list of Nic resources.
            type: array
            items:
              $ref: '#/components/schemas/NicRead'
      - $ref: '#/components/schemas/Pagination'
    NicRead:
      type: object
      required:
      - id
      - type
      - href
      - metadata
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the Nic.
          format: uuid
          example: "95e1de1e-dfe1-59f4-8da5-cb2ae5178fa9"
        type:
          description: The type of the resource.
          type: string
          enum:
          - nic
        href:
          description: The URL of the Nic.
          type: string
          example: /nics/95e1de1e-dfe1-59f4-8da5-cb2ae5178fa9
        metadata:
          $ref: '#/components/schemas/ElementMetadata'
        properties:
          $ref: '#/components/schemas/Nic'
    NicEnsure:
      type: object
      required:
      - id
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the Nic.
          format: uuid
          example: "95e1de1e-dfe1-59f4-8da5-cb2ae5178fa9"
        metadata:
          description: Metadata
          additionalProperties: true
          example: {}
        properties:
          $ref: '#/components/schemas/Nic'
    NicCreate:
      type: object
      required:
      - properties
      properties:
        metadata:
          description: Metadata
          additionalProperties: true
          example: {}
        properties:
          $ref: '#/components/schemas/Nic'
    LanReadList:
      allOf:
      - type: object
        required:
        - id
        - type
        - href
        properties:
          id:
            description: ID of the list of Lan resources.
            type: string
            format: uuid
            example: 0cf82afb-556f-53f3-af68-8f492a2effc2
          type:
            description: The type of the resource.
            type: string
            enum:
            - collection
          href:
            description: The URL of the list of Lan resources.
            type: string
            example: /lans
          items:
            description: The list of Lan resources.
            type: array
            items:
              $ref: '#/components/schemas/LanRead'
      - $ref: '#/components/schemas/Pagination'
    LanRead:
      type: object
      required:
      - id
      - type
      - href
      - metadata
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the Lan.
          format: uuid
          example: "3d52d3ec-da61-5b48-878e-461d604debdb"
        type:
          description: The type of the resource.
          type: string
          enum:
          - lan
        href:
          description: The URL of the Lan.
          type: string
          example: /lans/3d52d3ec-da61-5b48-878e-461d604debdb
        metadata:
          $ref: '#/components/schemas/ElementMetadata'
        properties:
          $ref: '#/components/schemas/Lan'
    LanEnsure:
      type: object
      required:
      - id
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the Lan.
          format: uuid
          example: "3d52d3ec-da61-5b48-878e-461d604debdb"
        metadata:
          description: Metadata
          additionalProperties: true
          example: {}
        properties:
          $ref: '#/components/schemas/Lan'
    LanCreate:
      type: object
      required:
      - properties
      properties:
        metadata:
          description: Metadata
          additionalProperties: true
          example: {}
        properties:
          $ref: '#/components/schemas/Lan'
    FlowLogReadList:
      allOf:
      - type: object
        required:
        - id
        - type
        - href
        properties:
          id:
            description: ID of the list of FlowLog resources.
            type: string
            format: uuid
            example: 3c38d028-8e38-5554-84d6-93c124bb39e5
          type:
            description: The type of the resource.
            type: string
            enum:
            - collection
          href:
            description: The URL of the list of FlowLog resources.
            type: string
            example: /flowlogs
          items:
            description: The list of FlowLog resources.
            type: array
            items:
              $ref: '#/components/schemas/FlowLogRead'
      - $ref: '#/components/schemas/Pagination'
    FlowLogRead:
      type: object
      required:
      - id
      - type
      - href
      - metadata
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the FlowLog.
          format: uuid
          example: "8ef19972-2ea3-5618-8455-0c04a6051f58"
        type:
          description: The type of the resource.
          type: string
          enum:
          - flowlog
        href:
          description: The URL of the FlowLog.
          type: string
          example: /flowlogs/8ef19972-2ea3-5618-8455-0c04a6051f58
        metadata:
          $ref: '#/components/schemas/ElementMetadata'
        properties:
          $ref: '#/components/schemas/FlowLog'
    FlowLogEnsure:
      type: object
      required:
      - id
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the FlowLog.
          format: uuid
          example: "8ef19972-2ea3-5618-8455-0c04a6051f58"
        metadata:
          description: Metadata
          additionalProperties: true
          example: {}
        properties:
          $ref: '#/components/schemas/FlowLog'
    FlowLogCreate:
      type: object
      required:
      - properties
      properties:
        metadata:
          description: Metadata
          additionalProperties: true
          example: {}
        properties:
          $ref: '#/components/schemas/FlowLog'
    NetworkAclReadList:
      allOf:
      - type: object
        required:
        - id
        - type
        - href
        properties:
          id:
            description: ID of the list of NetworkAcl resources.
            type: string
            format: uuid
            example: b3becf8c-148b-5aef-bce6-166a0a8a6058
          type:
            description: The type of the resource.
            type: string
            enum:
            - collection
          href:
            description: The URL of the list of NetworkAcl resources.
            type: string
            example: /nacls
          items:
            description: The list of NetworkAcl resources.
            type: array
            items:
              $ref: '#/components/schemas/NetworkAclRead'
      - $ref: '#/components/schemas/Pagination'
    NetworkAclRead:
      type: object
      required:
      - id
      - type
      - href
      - metadata
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the NetworkAcl.
          format: uuid
          example: "f187bce3-4b78-59de-a3e7-10f2b61ad742"
        type:
          description: The type of the resource.
          type: string
          enum:
          - networkacl
        href:
          description: The URL of the NetworkAcl.
          type: string
          example: /nacls/f187bce3-4b78-59de-a3e7-10f2b61ad742
        metadata:
          $ref: '#/components/schemas/ElementMetadata'
        properties:
          $ref: '#/components/schemas/NetworkAcl'
    NetworkAclEnsure:
      type: object
      required:
      - id
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the NetworkAcl.
          format: uuid
          example: "f187bce3-4b78-59de-a3e7-10f2b61ad742"
        metadata:
          description: Metadata
          additionalProperties: true
          example: {}
        properties:
          $ref: '#/components/schemas/NetworkAcl'
    NetworkAclCreate:
      type: object
      required:
      - properties
      properties:
        metadata:
          description: Metadata
          additionalProperties: true
          example: {}
        properties:
          $ref: '#/components/schemas/NetworkAcl'
    NetworkAclRuleReadList:
      allOf:
      - type: object
        required:
        - id
        - type
        - href
        properties:
          id:
            description: ID of the list of NetworkAclRule resources.
            type: string
            format: uuid
            example: 11815ad2-8e58-5fa6-bbe8-438d615994d7
          type:
            description: The type of the resource.
            type: string
            enum:
            - collection
          href:
            description: The URL of the list of NetworkAclRule resources.
            type: string
            example: /naclrules
          items:
            description: The list of NetworkAclRule resources.
            type: array
            items:
              $ref: '#/components/schemas/NetworkAclRuleRead'
      - $ref: '#/components/schemas/Pagination'
    NetworkAclRuleRead:
      type: object
      required:
      - id
      - type
      - href
      - metadata
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the NetworkAclRule.
          format: uuid
          example: "e775ab89-71e0-50e9-a7ab-db818d4323e7"
        type:
          description: The type of the resource.
          type: string
          enum:
          - networkaclrule
        href:
          description: The URL of the NetworkAclRule.
          type: string
          example: /naclrules/e775ab89-71e0-50e9-a7ab-db818d4323e7
        metadata:
          $ref: '#/components/schemas/ElementMetadata'
        properties:
          $ref: '#/components/schemas/NetworkAclRule'
    NetworkAclRuleEnsure:
      type: object
      required:
      - id
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the NetworkAclRule.
          format: uuid
          example: "e775ab89-71e0-50e9-a7ab-db818d4323e7"
        metadata:
          description: Metadata
          additionalProperties: true
          example: {}
        properties:
          $ref: '#/components/schemas/NetworkAclRule'
    NetworkAclRuleCreate:
      type: object
      required:
      - properties
      properties:
        metadata:
          description: Metadata
          additionalProperties: true
          example: {}
        properties:
          $ref: '#/components/schemas/NetworkAclRule'
    RouteTableReadList:
      allOf:
      - type: object
        required:
        - id
        - type
        - href
        properties:
          id:
            description: ID of the list of RouteTable resources.
            type: string
            format: uuid
            example: 685d96e8-716e-5f61-8ffe-a14a3128aaf4
          type:
            description: The type of the resource.
            type: string
            enum:
            - collection
          href:
            description: The URL of the list of RouteTable resources.
            type: string
            example: /routetables
          items:
            description: The list of RouteTable resources.
            type: array
            items:
              $ref: '#/components/schemas/RouteTableRead'
      - $ref: '#/components/schemas/Pagination'
    RouteTableRead:
      type: object
      required:
      - id
      - type
      - href
      - metadata
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the RouteTable.
          format: uuid
          example: "82525854-b4ab-5360-b28b-174476941c7f"
        type:
          description: The type of the resource.
          type: string
          enum:
          - routetable
        href:
          description: The URL of the RouteTable.
          type: string
          example: /routetables/82525854-b4ab-5360-b28b-174476941c7f
        metadata:
          $ref: '#/components/schemas/ElementMetadata'
        properties:
          $ref: '#/components/schemas/RouteTable'
    RouteTableEnsure:
      type: object
      required:
      - id
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the RouteTable.
          format: uuid
          example: "82525854-b4ab-5360-b28b-174476941c7f"
        metadata:
          description: Metadata
          additionalProperties: true
          example: {}
        properties:
          $ref: '#/components/schemas/RouteTable'
    RouteTableCreate:
      type: object
      required:
      - properties
      properties:
        metadata:
          description: Metadata
          additionalProperties: true
          example: {}
        properties:
          $ref: '#/components/schemas/RouteTable'
    RouteReadList:
      allOf:
      - type: object
        required:
        - id
        - type
        - href
        properties:
          id:
            description: ID of the list of Route resources.
            type: string
            format: uuid
            example: f01a9077-8faa-5b64-8743-2b3ddba0c498
          type:
            description: The type of the resource.
            type: string
            enum:
            - collection
          href:
            description: The URL of the list of Route resources.
            type: string
            example: /routes
          items:
            description: The list of Route resources.
            type: array
            items:
              $ref: '#/components/schemas/RouteRead'
      - $ref: '#/components/schemas/Pagination'
    RouteRead:
      type: object
      required:
      - id
      - type
      - href
      - metadata
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the Route.
          format: uuid
          example: "50982018-bb17-5cb9-bcd4-97f8bbc7dc23"
        type:
          description: The type of the resource.
          type: string
          enum:
          - route
        href:
          description: The URL of the Route.
          type: string
          example: /routes/50982018-bb17-5cb9-bcd4-97f8bbc7dc23
        metadata:
          $ref: '#/components/schemas/ElementMetadata'
        properties:
          $ref: '#/components/schemas/Route'
    RouteEnsure:
      type: object
      required:
      - id
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the Route.
          format: uuid
          example: "50982018-bb17-5cb9-bcd4-97f8bbc7dc23"
        metadata:
          description: Metadata
          additionalProperties: true
          example: {}
        properties:
          $ref: '#/components/schemas/Route'
    RouteCreate:
      type: object
      required:
      - properties
      properties:
        metadata:
          description: Metadata
          additionalProperties: true
          example: {}
        properties:
          $ref: '#/components/schemas/Route'
    SecurityGroupReadList:
      allOf:
      - type: object
        required:
        - id
        - type
        - href
        properties:
          id:
            description: ID of the list of SecurityGroup resources.
            type: string
            format: uuid
            example: 85157506-8f11-5714-8daf-ff9f2750913c
          type:
            description: The type of the resource.
            type: string
            enum:
            - collection
          href:
            description: The URL of the list of SecurityGroup resources.
            type: string
            example: /securitygroups
          items:
            description: The list of SecurityGroup resources.
            type: array
            items:
              $ref: '#/components/schemas/SecurityGroupRead'
      - $ref: '#/components/schemas/Pagination'
    SecurityGroupRead:
      type: object
      required:
      - id
      - type
      - href
      - metadata
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the SecurityGroup.
          format: uuid
          example: "f2966c32-28d2-5a3f-9356-979d5ce2bf5d"
        type:
          description: The type of the resource.
          type: string
          enum:
          - securitygroup
        href:
          description: The URL of the SecurityGroup.
          type: string
          example: /securitygroups/f2966c32-28d2-5a3f-9356-979d5ce2bf5d
        metadata:
          $ref: '#/components/schemas/ElementMetadata'
        properties:
          $ref: '#/components/schemas/SecurityGroup'
    SecurityGroupEnsure:
      type: object
      required:
      - id
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the SecurityGroup.
          format: uuid
          example: "f2966c32-28d2-5a3f-9356-979d5ce2bf5d"
        metadata:
          description: Metadata
          additionalProperties: true
          example: {}
        properties:
          $ref: '#/components/schemas/SecurityGroup'
    SecurityGroupCreate:
      type: object
      required:
      - properties
      properties:
        metadata:
          description: Metadata
          additionalProperties: true
          example: {}
        properties:
          $ref: '#/components/schemas/SecurityGroup'
    SecurityGroupRuleReadList:
      allOf:
      - type: object
        required:
        - id
        - type
        - href
        properties:
          id:
            description: ID of the list of SecurityGroupRule resources.
            type: string
            format: uuid
            example: 27e303a6-07f1-546e-ab95-24dec7fbb028
          type:
            description: The type of the resource.
            type: string
            enum:
            - collection
          href:
            description: The URL of the list of SecurityGroupRule resources.
            type: string
            example: /securitygrouprules
          items:
            description: The list of SecurityGroupRule resources.
            type: array
            items:
              $ref: '#/components/schemas/SecurityGroupRuleRead'
      - $ref: '#/components/schemas/Pagination'
    SecurityGroupRuleRead:
      type: object
      required:
      - id
      - type
      - href
      - metadata
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the SecurityGroupRule.
          format: uuid
          example: "37fa64f3-2ac2-5ae8-850d-63e3d9bd4cad"
        type:
          description: The type of the resource.
          type: string
          enum:
          - securitygrouprule
        href:
          description: The URL of the SecurityGroupRule.
          type: string
          example: /securitygrouprules/37fa64f3-2ac2-5ae8-850d-63e3d9bd4cad
        metadata:
          $ref: '#/components/schemas/ElementMetadata'
        properties:
          $ref: '#/components/schemas/SecurityGroupRule'
    SecurityGroupRuleEnsure:
      type: object
      required:
      - id
      - properties
      properties:
        id:
          type: string
          description: The ID (UUID) of the SecurityGroupRule.
          format: uuid
          example: "37fa64f3-2ac2-5ae8-850d-63e3d9bd4cad"
        metadata:
          description: Metadata
          additionalProperties: true
          example: {}
        properties:
          $ref: '#/components/schemas/SecurityGroupRule'
    SecurityGroupRuleCreate:
      type: object
      required:
      - properties
      properties:
        metadata:
          description: Metadata
          additionalProperties: true
          example: {}
        properties:
          $ref: '#/components/schemas/SecurityGroupRule'
    Vpc:
      required:
        - location
      type: object
      properties:
        name:
          type: string
          description: The name of the resource.
          example: Global vpc
        description:
          type: string
          description: A description for the vpc.
          example: My Global Vpc
        location:
          type: string
          description: >-
            The physical location where the vpc will be created. This
            will be where all of your datacenters live.
          example: us/las
        vni:
          type: string
          x-internal: true
          description: >-
            Only settable for VPC and VPC-lite type. Unique identifier for virtual network address.
          nullable: true
          example: 15f67991-0f51-4efc-a8ad-ef1fb31a480c
        ipv4CidrBlock:
          type: array
          description: >-
            It contains the list of private IPv4 CIDR blocks on this virtual private cloud.
          nullable: true
          items:
            type: string
            example: 10.8.130.0/23
          x-prerelease: true
        ipv6CidrBlock:
          type: array
          description: >-
            This value is either 'null' or contains an automatically-assigned
            /56 IPv6 CIDR block if IPv6 is enabled on this virtual private cloud.
            It can neither be changed nor removed.
          nullable: true
          items:
            type: string
            example: 2001:db8:b06d:8f00::/56
          x-prerelease: true
        routetables:
          type: array
          description: >-
            List containing details of the route tables assigned to this vpc.
          items:
            type: string
            format: uuid
            example: a6ea70df-071c-4400-a497-9a08d69b97df
        defaultRouteTable:
          type: string
          description: UUID of the default route table for this vpc.
          format: uuid
          readOnly: true
          example: 9359e713-edff-4378-b3a5-54c59bd7dd13
        securitygroups:
          type: array
          description: >-
            List containing details of the security groups assigned to this vpc.
          items:
            type: string
            format: uuid
            example: 15f67991-0f51-4efc-a8ad-ef1fb31a480c
        defaultSecurityGroup:
          description: >-
            This will become the default security group for the vpc, replacing the old one if already exists.
            This security group must already exists prior to this request.
            Provide this field only if the `createDefaultSecurityGroup` field is missing. You cannot provide both of them
          type: string
          format: uuid
          example: 15f67991-0f51-4efc-a8ad-ef1fb31a480c
        createDefaultSecurityGroup:
          type: boolean
          description: >-
            If this field is set on true and this datacenter has no default security group then a default security group,
            with predefined rules, will be created for this datacenter.
            Default value is false.
            Provide this field only if the `defaultSecurityGroup` field is missing. You cannot provide both of them
          example: true
          writeOnly: true
        naclrules:
          type: array
          description: >-
            List containing details of the Network ACL rules assigned to this vpc.
          items:
            type: string
            format: uuid
            example: 757b0228-ea4c-4210-ace5-395db0b8ac26
        defaultNaclRule:
          description: >-
            This will become the default Network ACL rule for the vpc, replacing the old one if already exists.
            This Network ACL rule must already exists prior to this request.
          type: string
          format: uuid
          readOnly: true
          example: 15f67991-0f51-4efc-a8ad-ef1fb31a480c
    Datacenter:
      required:
        - location
        - vpcId
      type: object
      properties:
        name:
          type: string
          description: The name of the  resource.
          example: Production datacenter
        description:
          type: string
          description: A description for the datacenter, such as staging, production.
          example: My Production Datacenter
        vpcId:
          type: string
          format: uuid
          description: The vpc where the datacenter exists.
          example: c031d885-937d-4dc1-b3e1-95085c7046e2
        ipv4CidrBlock:
          type: string
          description: >-
            It contains the IPv4 CIDR block on this datacenter.
          nullable: true
          example: 10.8.130.0/23
          x-prerelease: true
        location:
          type: string
          description: >-
            The physical location where the datacenter will be created. This
            will be where all of your servers live. Property cannot be modified
            after datacenter creation (disallowed in update requests).
          example: us/las
        version:
          type: integer
          description: The version of the data center; incremented with every change.
          format: int32
          readOnly: true
          example: 8
        features:
          type: array
          description: >-
            List of features supported by the location where this data center is
            provisioned.
          readOnly: true
          example:
            - SSD
          items:
            type: string
        secAuthProtection:
          type: boolean
          description: >-
            Boolean value representing if the data center requires extra
            protection, such as two-step verification.
          example: true
        cpuArchitecture:
          type: array
          description: Array of features and CPU families available in a location
          readOnly: true
          items:
            $ref: '#/components/schemas/CpuArchitectureProperties'
    Server:
      required:
        - datacenterId
      type: object
      properties:
        templateUuid:
          type: string
          description: >-
            The ID of the template for creating a CUBE server; the available
            templates for CUBE servers can be found on the templates resource.
          example: 15f67991-0f51-4efc-a8ad-ef1fb31a480c
        name:
          type: string
          description: The name of the  resource.
          example: My resource
        hostname:
          type: string
          description: >-
            The hostname of the  resource.
            Allowed characters are a-z, 0-9 and - (minus).
            Hostname should not start with minus and should not be longer than 63 characters.
          example: myHostname
        cores:
          type: integer
          description: The total number of cores for the enterprise server.
          format: int32
          example: 4
        ram:
          type: integer
          description: >-
            The memory size for the enterprise server in MB, such as 2048. Size
            must be specified in multiples of 256 MB with a minimum of 256 MB;
            however, if you set ramHotPlug to TRUE then you must use a minimum
            of 1024 MB. If you set the RAM size more than 240GB, then ramHotPlug
            will be set to FALSE and can not be set to TRUE unless RAM size not
            set to less than 240GB.
          format: int32
          example: 4096
        availabilityZone:
          type: string
          description: The availability zone in which the server should be provisioned.
          example: AUTO
          enum:
            - AUTO
            - ZONE_1
            - ZONE_2
        vmState:
          type: string
          description: Status of the virtual machine.
          readOnly: true
          example: RUNNING
          enum:
            - NOSTATE
            - RUNNING
            - BLOCKED
            - PAUSED
            - SHUTDOWN
            - SHUTOFF
            - CRASHED
            - SUSPENDED
        cdroms:
          type: array
          description: >-
            List containing details of the CD-Roms s assigned to this server.
          items:
            type: string
            format: uuid
            example: 15f67991-0f51-4efc-a8ad-ef1fb31a480c
        bootCdrom:
          $ref: '#/components/schemas/ResourceReference'
        bootVolume:
          $ref: '#/components/schemas/ResourceReference'
        cpuFamily:
          type: string
          description: >-
            CPU architecture on which server gets provisioned; not all CPU
            architectures are available in all datacenter regions; available CPU
            architectures can be retrieved from the datacenter resource; must
            not be provided for CUBE and VCPU servers.
          example: INTEL_ICELAKE
        type:
          type: string
          description: 'Server type: CUBE, ENTERPRISE or VCPU.'
          example: CUBE
        datacenterId:
          type: string
          format: uuid
          description: The id of the datacenter to be attached to
          example: a4c6c98b-45b4-4b30-95c7-fab73eeb3089
        placementGroupId:
          type: string
          description: >-
            The placement group ID that belongs to this server; Requires system privileges,
            for internal usage only
          x-internal: true
          example: null
        nicMultiQueue:
          type: boolean
          description: >-
            Activate or deactivate the Multi Queue feature on all NICs of this server. This feature is beneficial to
            enable when the NICs are experiencing performance issues (e.g. low throughput). Toggling this
            feature will also initiate a restart of the server. If the specified value is `true`, the feature will
            be activated; if it is not specified or set to `false`, the feature will be deactivated.
            It is not allowed for servers of type Cube.
          example: true
          default: false
        securitygroups:
          type: array
          description: >-
            List containing details of the security groups assigned to this server.
          items:
            type: string
            format: uuid
            example: 15f67991-0f51-4efc-a8ad-ef1fb31a480c
    Volume:
      required:
        - size
      type: object
      properties:
        name:
          type: string
          description: The name of the  resource.
          example: My resource
        serverId:
          type: string
          format: uuid
          description: The uuid of the server to be attached to.
          example: addc0728-2878-4ef0-96c3-742684048398
        type:
          type: string
          description: >-
            Hardware type of the volume. DAS (Direct Attached Storage) could be
            used only in a composite call with a Cube server.
          example: HDD
        size:
          type: number
          description: The size of the volume in GB.
          example: 100
        availabilityZone:
          type: string
          description: >-
            The availability zone in which the volume should be provisioned. The
            storage volume will be provisioned on as few physical storage
            devices as possible, but this cannot be guaranteed upfront. This is
            uavailable for DAS (Direct Attached Storage), and subject to
            availability for SSD.
          example: AUTO
          enum:
            - AUTO
            - ZONE_1
            - ZONE_2
            - ZONE_3
        image:
          type: string
          description: Image or snapshot ID to be used as template for this volume.
          example: d6ad1576-fde9-4696-aa41-1ebd75bdaf49
        imagePassword:
          type: string
          description: >-
            Initial password to be set for installed OS. Works with public
            images only. Not modifiable, forbidden in update requests. Password
            rules allows all characters from a-z, A-Z, 0-9.
          example: mypass123
        imageAlias:
          type: string
          description: >-
            The alias of the image after which to specifically recognize it.
        sshKeys:
          type: array
          description: >-
            Public SSH keys are set on the image as authorized keys for
            appropriate SSH login to the instance using the corresponding
            private key. This field may only be set in creation requests. When
            reading, it always returns null. SSH keys are only supported if a
            public Linux image is used for the volume creation.
          example:
            - >-
              ssh-rsa
              AAAAB3NzaC1yc2EAAAADAQABAAABAQCyWh6LZ7f2wxnupVgtK2096bc69Vv9uT2A58lwN3ol0A6mxqlT0f4M1NbarVUxa+MVdxBLud5PvlkbYc9mY91OyzLGZMfVWvhAYz/tJSsDtsgRUl0GFVv332zDWk0i+mAVy0N408OORm5XqV6zvIDaiB/jopyjemUp2rnP7pXU4+98ilZw6ef9DF9y4YZ64mchL5//rcrGm1Lff3pC75X/polGONHeG6m4Vs8eIu+0epJ4PJBxO+rwRYp1zMnn90UCk21KvTcYops2cte7ouXQwkGUq3vmXxnSdvuivK/4JNoFQBsaGV974hDmloS5LOvSJjKpXs8Ed437ln712345
            - >-
              ssh-rsa
              AAAAB3NzaC1yc2EAAAADAQABAAABAQCyWh6LZ7f2wxnupVgtK2096bc69Vv9uT2A58lwN3ol0A6mxqlT0f4M1NbarVUxa+MVdxBLud5PvlkbYc9mY91OyzLGZMfVWvhAYz/tJSsDtsgRUl0GFVv332zDWk0i+mAVy0N408OORm5XqV6zvIDaiB/jopyjemUp2rnP7pXU4+98ilZw6ef9DF9y4YZ64mchL5//rcrGm1Lff3pC75X/polGONHeG6m4Vs8eIu+0epJ4PJBxO+rwRYp1zMnn90UCk21KvTcYops2cte7ouXQwkGUq3vmXxnSdvuivK/asdfghjkjhyutry545tgvbn76e4rf43
          items:
            type: string
        bus:
          type: string
          description: The bus type for this volume; default is VIRTIO.
          example: VIRTIO
          enum:
            - VIRTIO
            - IDE
            - UNKNOWN
        licenceType:
          type: string
          description: OS type for this volume.
          example: LINUX
          x-extensible-enum:
            - UNKNOWN
            - WINDOWS
            - WINDOWS2016
            - WINDOWS2019
            - WINDOWS2022
            - WINDOWS2025
            - RHEL
            - LINUX
            - OTHER
        cpuHotPlug:
          type: boolean
          description: Hot-plug capable CPU (no reboot required).
          example: true
        ramHotPlug:
          type: boolean
          description: Hot-plug capable RAM (no reboot required).
          example: true
        nicHotPlug:
          type: boolean
          description: Hot-plug capable NIC (no reboot required).
          example: true
        nicHotUnplug:
          type: boolean
          description: Hot-unplug capable NIC (no reboot required).
          example: true
        discVirtioHotPlug:
          type: boolean
          description: Hot-plug capable Virt-IO drive (no reboot required).
          example: true
        discVirtioHotUnplug:
          type: boolean
          description: >-
            Hot-unplug capable Virt-IO drive (no reboot required). Not supported
            with Windows VMs.
          example: true
        exposeSerial:
          $ref: '#/components/schemas/ExposeSerial'
        deviceNumber:
          type: integer
          description: >-
            The Logical Unit Number of the storage volume. Null for volumes, not
            mounted to a VM.
          format: int64
          readOnly: true
          example: 3
        pciSlot:
          type: integer
          description: >-
            The PCI slot number of the storage volume. Null for volumes, not
            mounted to a VM.
          format: int32
          readOnly: true
          example: 7
        backupunitId:
          type: string
          format: uuid
          description: >-
            The ID of the backup unit that the user has access to. The property
            is immutable and is only allowed to be set on creation of a new a
            volume. It is mandatory to provide either 'public image' or
            'imageAlias' in conjunction with this property.
          example: 25f67991-0f51-4efc-a8ad-ef1fb31a481c
        userData:
          type: string
          description: >-
            The cloud-init configuration for the volume as base64 encoded
            string. The property is immutable and is only allowed to be set on
            creation of a new a volume. It is mandatory to provide either
            'public image' or 'imageAlias' that has cloud-init compatibility in
            conjunction with this property.
        bootServer:
          type: string
          description: The UUID of the attached server.
          readOnly: true
          example: 25f67991-0f51-4efc-a8ad-ef1fb31a481c
        bootOrder:
          type: string
          description: >-
            Determines whether the volume will be used as a boot volume. Set to
            `NONE`, the volume will not be used as boot volume. Set to
            `PRIMARY`, the volume will be used as boot volume and all other
            volumes must be set to `NONE`. Set to `AUTO` or `null` requires all
            volumes to be set to `AUTO` or `null`; this will use the legacy
            behavior, which is to use the volume as a boot volume only if there
            are no other volumes or cdrom devices.
          nullable: true
          example: AUTO
          default: AUTO
          enum:
            - AUTO
            - NONE
            - PRIMARY
    Image:
      required:
        - licenceType
      type: object
      properties:
        name:
          type: string
          description: The resource name.
          example: My resource
        volumeId:
          type: string
          format: uuid
          description: The uuid of the volume to be attached to.
          nullable: true
          example: addc0728-2878-4ef0-96c3-742684048398
        serverId:
          type: string
          format: uuid
          description: The uuid of the server to be attached to.
          nullable: true
          example: addc0728-2878-4ef0-96c3-742684048398
        description:
          type: string
          description: Human-readable description.
          example: 'The image/snapshot of Ubuntu '
        location:
          type: string
          description: The location of this image/snapshot.
          readOnly: true
          example: us/las
        size:
          type: number
          description: The image size in GB.
          readOnly: true
          example: 100
        cpuHotPlug:
          type: boolean
          description: Hot-plug capable CPU (no reboot required).
          example: true
        cpuHotUnplug:
          type: boolean
          description: Hot-unplug capable CPU (no reboot required).
          example: true
        ramHotPlug:
          type: boolean
          description: Hot-plug capable RAM (no reboot required).
          example: true
        ramHotUnplug:
          type: boolean
          description: Hot-unplug capable RAM (no reboot required).
          example: true
        nicHotPlug:
          type: boolean
          description: Hot-plug capable NIC (no reboot required).
          example: true
        nicHotUnplug:
          type: boolean
          description: Hot-unplug capable NIC (no reboot required).
          example: true
        discVirtioHotPlug:
          type: boolean
          description: Hot-plug capable Virt-IO drive (no reboot required).
          example: true
        discVirtioHotUnplug:
          type: boolean
          description: >-
            Hot-unplug capable Virt-IO drive (no reboot required). Not supported
            with Windows VMs.
          example: true
        discScsiHotPlug:
          type: boolean
          description: Hot-plug capable SCSI drive (no reboot required).
          example: true
        discScsiHotUnplug:
          type: boolean
          description: >-
            Hot-unplug capable SCSI drive (no reboot required). Not supported
            with Windows VMs.
          example: true
        exposeSerial:
          $ref: '#/components/schemas/ExposeSerial'
        licenceType:
          type: string
          description: The OS type of this image.
          example: LINUX
          x-extensible-enum:
            - UNKNOWN
            - WINDOWS
            - WINDOWS2016
            - WINDOWS2019
            - WINDOWS2022
            - WINDOWS2025
            - RHEL
            - LINUX
            - OTHER
        imageType:
          type: string
          description: The image type.
          readOnly: true
          example: HDD
          enum:
            - HDD
            - CDROM
            - UNKNOWN
        public:
          type: boolean
          description: Indicates whether the image is part of a public repository.
          readOnly: true
          example: true
        imageAliases:
          type: array
          description: List of image aliases mapped for this image
          readOnly: true
          items:
            type: string
        cloudInit:
          type: string
          description: Cloud init compatibility.
          example: V1
          enum:
            - NONE
            - V1
        applicationType:
          $ref: "#/components/schemas/ApplicationType"
    Lan:
      type: object
      required:
        - datacenterId
      properties:
        name:
          type: string
          description: The name of the  resource.
          example: My resource
        datacenterId:
          type: string
          format: uuid
          description: The id of the datacenter to be attached to.
          example: addc0728-2878-4ef0-96c3-742684048398
        ipFailover:
          type: array
          description: IP failover configurations for lan
          items:
            $ref: '#/components/schemas/IPFailover'
        ipv4CidrBlock:
          type: string
          description: >-
            For public LANs this property is null,
            for private LANs it contains the private IPv4 CIDR range.
            This property is a read only property.
          readOnly: true
          nullable: true
          example: 10.8.130.0/23
          x-prerelease: true
        ipv6CidrBlock:
          type: string
          description: >-
            For a GET request, this value is either 'null' or contains the LAN's
            /64 IPv6 CIDR block if this LAN is IPv6 enabled. For POST/PUT/PATCH
            requests, 'AUTO' will result in enabling this LAN for IPv6 and
            automatically assign a /64 IPv6 CIDR block to this LAN and /80 IPv6
            CIDR blocks to the NICs and one /128 IPv6 address to each connected
            NIC. If you choose the IPv6 CIDR block for the LAN on your own, then
            you must provide a /64 block, which is inside the IPv6 CIDR block of
            the virtual datacenter and unique inside all LANs from this virtual
            datacenter. If you enable IPv6 on a LAN with NICs, those NICs will
            get a /80 IPv6 CIDR block and one IPv6 address assigned to each
            automatically, unless you specify them explicitly on the LAN and on
            the NICs. A virtual data center is limited to a maximum of 256
            IPv6-enabled LANs.
          nullable: true
          example: 2001:db8:b06d:8f5a::/64
          x-prerelease: true
        public:
          type: boolean
          description: Indicates if the LAN is connected to the internet or not.
          example: true
        networkAcls:
          type: array
          description: >-
            List containing details of the Network ACLs assigned to this lan.
          items:
            type: string
            format: uuid
            example: 15f67991-0f51-4efc-a8ad-ef1fb31a480c
        routeTableId:
          $ref: '#/components/schemas/ResourceReference'
        vni:
          type: integer
          format: int32
          readOnly: true
          x-internal: true
          description: The VNI value that is assigned to the LAN.
          example: 123
    Nic:
      type: object
      properties:
        name:
          type: string
          description: The name of the  resource.
          example: My resource
        mac:
          type: string
          description: The MAC address of the NIC.
          example: 00:0a:95:9d:68:16
        ips:
          type: array
          description: >-
            Collection of IP addresses, assigned to the NIC. Explicitly assigned
            public IPs need to come from reserved IP blocks. Passing value null
            or empty array will assign an IP address automatically.
          nullable: true
          items:
            type: string
          example:
            - 10.160.12.12
        dhcp:
          type: boolean
          description: Indicates if the NIC will reserve an IP using DHCP.
          example: true
          default: true
        ipv6Ips:
          type: array
          description: >-
            If this NIC is connected to an IPv6 enabled LAN then this property
            contains the IPv6 IP addresses of the NIC. The maximum number of
            IPv6 IP addresses per NIC is 50, if you need more, contact support.
            If you leave this property 'null' when adding a NIC, when changing
            the NIC's IPv6 CIDR block, when changing the LAN's IPv6 CIDR block
            or when moving the NIC to a different IPv6 enabled LAN, then we will
            automatically assign the same number of IPv6 addresses which you had
            before from the NICs new CIDR block. If you leave this property
            'null' while not changing the CIDR block, the IPv6 IP addresses
            won't be changed either. You can also provide your own self choosen
            IPv6 addresses, which then must be inside the IPv6 CIDR block of
            this NIC.
          nullable: true
          example:
            - 2001:db8:b06d:8f5a:0609::1
          items:
            type: string
          x-prerelease: true
        ipv6CidrBlock:
          type: string
          description: >-
            If this NIC is connected to an IPv6 enabled LAN then this property
            contains the /80 IPv6 CIDR block of the NIC. If you leave this
            property 'null' when adding a NIC to an IPv6-enabled LAN, then an
            IPv6 CIDR block will automatically be assigned to the NIC, but you
            can also specify an /80 IPv6 CIDR block for the NIC on your own,
            which must be inside the /64 IPv6 CIDR block of the LAN and unique.
            This value can only be set, if the LAN already has an IPv6 CIDR
            block assigned. An IPv6-enabled LAN is limited to a maximum of
            65,536 NICs.
          nullable: true
          example: 2001:db8:b06d:8f5a:0609::/80
          x-prerelease: true
        dhcpv6:
          type: boolean
          description: >-
            Indicates if the NIC will receive an IPv6 using DHCP. It can be set
            to 'true' or 'false' only if this NIC is connected to an IPv6
            enabled LAN.
          nullable: true
          example: true
          default: true
          x-prerelease: true
        lanId:
          type: string
          description: >-
            The LAN uuid the nic will be on.
          format: uuid
          nullable: true
          example: fde83b97-f515-420c-ab10-b3cfaaf45155
        serverId:
          type: string
          description: >-
            The server uuid the Vpc will be on.
          format: uuid
          nullable: true
          example: fde83b97-f515-420c-ab10-b3cfaaf45155
        firewallActive:
          type: boolean
          description: >-
            Activate or deactivate the firewall. By default, an active firewall
            without any defined rules will block all incoming network traffic
            except for the firewall rules that explicitly allows certain
            protocols, IP addresses and ports.
          example: false
        firewallType:
          type: string
          description: >-
            The type of rules that will be allowed on the NIC. If not
            specified, the default INGRESS value is used.
          example: INGRESS
          allOf:
            - $ref: '#/components/schemas/RuleType'
        securitygroups:
          type: array
          description: >-
            List containing details of the security groups assigned to this nic.
          items:
            type: string
            format: uuid
            example: 15f67991-0f51-4efc-a8ad-ef1fb31a480c
        deviceNumber:
          type: integer
          description: >-
            The Logical Unit Number (LUN) of the storage volume. Null if this
            NIC was created using Cloud API and no DCD changes were performed on
            the Datacenter.
          format: int32
          readOnly: true
          example: 3
        pciSlot:
          type: integer
          description: The PCI slot number for the NIC.
          format: int32
          readOnly: true
          example: 7
        vnet:
          type: string
          description: -<
            The vnet ID that belongs to this NIC; Requires system privileges,
            for internal usage only
          x-internal: true
          example: null
        routeTable:
          $ref: '#/components/schemas/ResourceReference'
    FlowLog:
      required:
        - action
        - bucket
        - direction
        - name
      type: object
      properties:
        name:
          type: string
          description: The resource name.
          example: My resource
        nicId:
          type: string
          format: uuid
          description: The nicId where the flowLog will be attached.
          nullable: true
          example: fde83b97-f515-420c-ab10-b3cfaaf45155
        serverId:
          type: string
          format: uuid
          description: The serverId where the flowLog will be attached.
          nullable: true
          example: addc0728-2878-4ef0-96c3-742684048398
        action:
          type: string
          description: Specifies the traffic action pattern.
          example: ACCEPTED
          enum:
            - ACCEPTED
            - REJECTED
            - ALL
        direction:
          type: string
          description: Specifies the traffic direction pattern.
          example: INGRESS
          allOf:
            - $ref: '#/components/schemas/RuleType'
        bucket:
          type: string
          description: The bucket name of an existing IONOS Cloud Object storage bucket.
          example: bucketName/key
    IpBlock:
      required:
        - location
        - size
      type: object
      properties:
        ips:
          type: array
          description: >-
            Collection of IPs, associated with the IP Block.
          readOnly: true
          items:
            type: string
          example:
            - 22.231.113.66
        location:
          type: string
          description: >-
            Location of that IP block. Property cannot be modified after it is
            created (disallowed in update requests).
          example: us/las
        size:
          type: integer
          description: The size of the IP block.
          format: int32
          example: 5
        name:
          type: string
          description: The name of the  resource.
          example: My resource
        ipConsumers:
          type: array
          description: Read-Only attribute. Lists consumption detail for an individual IP
          readOnly: true
          items:
            $ref: '#/components/schemas/IpConsumer'
          example:
            - ip: 192.18.2.11
              mac: 02:01:3f:52:6e:57
              nicId: 0e8ee463-1174-46f2-87ba-a5c79c14d8e5
              serverId: e6a3466f-8d6e-4cb6-8001-f4e245f222b7
              serverName: Unnamed Server
              datacenterId: 6e54a9ec-aace-4176-8ee4-1c3a704fccfc
              datacenterName: IpConsumerDC
    Snapshot:
      allOf:
        - $ref: '#/components/schemas/Image'
    VolumeOperation:
      type: object
      required:
        - operation
      properties:
        operation:
          type: string
          description: The requested operation
          example: RESTORESNAPSHOT
          enum:
            - RESTORESNAPSHOT
        snapshotId:
          type: string
          format: uuid
          description: The id of the volume
          example: eb297fb4-7e08-4709-940c-cdd0f3e3385c
    VolumeOperationResponse:
      allOf:
        - $ref: '#/components/schemas/Snapshot'
    ServerOperation:
      required:
        - operation
      type: object
      properties:
        operation:
          type: string
          description: The requested operation
          example: START
          enum:
            - REBOOT
            - START
            - STOP
            - SUSPEND
            - RESUME
            - UPGRADE
            - TOKEN
            - REMOTECONSOLE
    ServerOperationResponse:
      type: object
      properties:
        url:
          type: string
          description: The remote console url with the jwToken parameter for access
          readOnly: true
          nullable: true
          example: >-
            https://dcd.ionos.com/noVNC?token=eyJ0eXAiOiJKV1QiLCJraWQiOiI0MWM1MDFlNC03NGY3LTQwYjctYmMxMi1lZWIzMTAzNThlZDkiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJpb25vc2Nsb3VkIiwiaWF0IjoxNjAyNDg5NTkzMDcxLCJzZXJ2ZXIiOnsidXVpZCI6IjMwNGEwZGVlLWE3OTgtNDNhNi04MzIyLTk3M2NiYzc3Yjg4ZCIsIm5hbWUiOiJTZXJ2ZXIifX0.TND9kJd8GXM39XP5PMH_LnF_99al4MEkI_eoEowPvPztirgM50aZEdg6SuLYQzg-R7vrA7hEFaK4NJb2BUUsIZYVMhjl1QmKUE5TnP0Q2zYnIfNQNZFDu2rKrOydPCkPQwlMVvvZLeBSz7lrKYujF-qZ_yY_6SHlFtt-rg6IznRtup8AFziXtl-9cEsWU92_GCTd5LiriQrsnFAiGRbb0p2_6OYAQAH9FeWu4cxrbSwUmeR7Q4klJyZqFd0fv6UTFBtpSiyci7rsB142MXyLcqM4PrBkgd9P5OFbJYf5lbsb9pW04wLSl9rqoWGgZvWsqpuzosUkQRZt_O5yuYmT9w
        token:
          type: string
          description: The jwToken for the server.
          readOnly: true
          nullable: true
          example: >-
            eyJ0eXAiOiJKV1QiLCJraWQiOiI0MWM1MDFlNC03NGY3LTQwYjctYmMxMi1lZWIzMTAzNThlZDkiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJpb25vc2Nsb3VkIiwiaWF0IjoxNjAyNDg5NTkzMDcxLCJzZXJ2ZXIiOnsidXVpZCI6IjMwNGEwZGVlLWE3OTgtNDNhNi04MzIyLTk3M2NiYzc3Yjg4ZCIsIm5hbWUiOiJTZXJ2ZXIifX0.TND9kJd8GXM39XP5PMH_LnF_99al4MEkI_eoEowPvPztirgM50aZEdg6SuLYQzg-R7vrA7hEFaK4NJb2BUUsIZYVMhjl1QmKUE5TnP0Q2zYnIfNQNZFDu2rKrOydPCkPQwlMVvvZLeBSz7lrKYujF-qZ_yY_6SHlFtt-rg6IznRtup8AFziXtl-9cEsWU92_GCTd5LiriQrsnFAiGRbb0p2_6OYAQAH9FeWu4cxrbSwUmeR7Q4klJyZqFd0fv6UTFBtpSiyci7rsB142MXyLcqM4PrBkgd9P5OFbJYf5lbsb9pW04wLSl9rqoWGgZvWsqpuzosUkQRZt_O5yuYmT9w
    RouteTable:
      required:
        - vpcId
      type: object
      properties:
        name:
          type: string
          description: The name of the route table.
          example: My route table
        vpcId:
          type: string
          format: uuid
          description: The id of the vpc.
          example: aa5f6bcf-c9db-46d3-9d4c-330aa90647aa
        description:
          type: string
          description: The description of the route table.
          example: My route table description.
        default:
          type: boolean
          description: >-
            Indicates if the route table is the default route table of the vpc.
            There can be only one default route table in a vpc.
          example: true
          default: false
        lans:
          type: array
          description: >-
            List containing details of the LANs assigned to this route table.
          readOnly: true
          items:
            type: string
            format: uuid
            example: 15f67991-0f51-4efc-a8ad-ef1fb31a480c
        nics:
          type: array
          description: >-
            List containing details of the NICs assigned to this route table.
          readOnly: true
          items:
            type: string
            format: uuid
            example: 15f67991-0f51-4efc-a8ad-ef1fb31a480c
    Route:
      required:
        - prefix
        - gatewayType
        - routeTableId
      type: object
      properties:
        name:
          type: string
          description: The name of the route.
          example: My route
        routeTableId:
          type: string
          format: uuid
          description: The uuid of the route table.
          example: aa5f6bcf-c9db-46d3-9d4c-330aa90647aa
        description:
          type: string
          description: The description of the route.
          example: My route description.
        prefix:
          type: string
          description: >-
            IPV4 or IPV6 CIDR representing the prefix for the route.
            If the gateway type is `INTERNET` the prefix will be set to 0.0.0.0/0.
          example: 10.1.2.0/23
        gatewayType:
          type: string
          description: Gateway type of the route.
          example: PEERING
          enum:
            - LOCAL
            - INTERNET
            - GUEST
            - PEERING
        gatewayNicId:
          type: string
          format: uuid
          description: >-
            UUID of the gateway NIC of this route. Must be specified only if the
            gateway type is `PEERING` or `GUEST`.
          example: 25f67991-0f51-4efc-a8ad-ef1fb31a481c
          nullable: true
        gatewayIp:
          type: string
          description: >-
            IPv4 or IPv6 Gateway IP for the route. Must be specified only if the
            gateway type is `PEERING` or `GUEST`.
          example: 80.1.5.16
          nullable: true
    SecurityGroup:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          maxLength: 60
          description: The name of the security group.
          nullable: true
          example: My security group
        description:
          type: string
          maxLength: 300
          description: The description of the security group.
          example: My security group description
    SecurityGroupRule:
      required:
        - protocol
        - securityGroupId
      type: object
      properties:
        name:
          type: string
          description: The name of the  resource.
          example: My resource
        securityGroupId:
          type: string
          format: uuid
          description: The uuid of the security group to which the rule belongs to
          example: fde83b97-f515-420c-ab10-b3cfaaf45155
        protocol:
          type: string
          description: >-
            The protocol for the rule. Property cannot be modified after it is
            created (disallowed in update requests).
          example: TCP
          enum:
            - TCP
            - UDP
            - ICMP
            - ICMPv6
            - GRE
            - VRRP
            - ESP
            - AH
            - ANY
        sourceMac:
          type: string
          description: >-
            Only traffic originating from the respective MAC address is allowed.
            Valid format: aa:bb:cc:dd:ee:ff. Value null allows traffic from any
            MAC address.
          nullable: true
          example: 00:0a:95:9d:68:16
        ipVersion:
          type: string
          description: >-
            The IP version for this rule. If sourceIp or targetIp are specified,
            you can omit this value - the IP version will then be deduced from
            the IP address(es) used; if you specify it anyway, it must match the
            specified IP address(es). If neither sourceIp nor targetIp are
            specified, this rule allows traffic only for the specified IP
            version. If neither sourceIp, targetIp nor ipVersion are specified,
            this rule will only allow IPv4 traffic.
          nullable: true
          example: IPv4
          enum:
            - IPv4
            - IPv6
        sourceIp:
          type: string
          description: >-
            Only traffic originating from the respective IP address (or CIDR
            block) is allowed. Value null allows traffic from any IP address
            (according to the selected ipVersion).
          nullable: true
          example: 22.231.113.64
        targetIp:
          type: string
          description: >-
            If the target NIC has multiple IP addresses, only the traffic
            directed to the respective IP address (or CIDR block) of the NIC is
            allowed. Value null allows traffic to any target IP address
            (according to the selected ipVersion).
          nullable: true
          example: 22.231.113.64
        icmpCode:
          maximum: 254
          minimum: 0
          type: integer
          description: >-
            Defines the allowed code (from 0 to 254) if protocol ICMP or ICMPv6
            is chosen. Value null allows all codes.
          format: int32
          nullable: true
          example: 0
        icmpType:
          maximum: 254
          minimum: 0
          type: integer
          description: >-
            Defines the allowed type (from 0 to 254) if the protocol ICMP or
            ICMPv6 is chosen. Value null allows all types.
          format: int32
          nullable: true
          example: 8
        portRangeStart:
          maximum: 65535
          minimum: 1
          type: integer
          description: >-
            Defines the start range of the allowed port (from 1 to 65535) if
            protocol TCP or UDP is chosen. Leave portRangeStart and portRangeEnd
            value null to allow all ports.
          format: int32
          example: 8
        portRangeEnd:
          maximum: 65535
          minimum: 1
          type: integer
          description: >-
            Defines the end range of the allowed port (from 1 to 65535) if the
            protocol TCP or UDP is chosen. Leave portRangeStart and portRangeEnd
            null to allow all ports.
          format: int32
          example: 8
        type:
          type: string
          description: >-
            The type of the rule. If not specified, the default INGRESS
            value is used.
          example: INGRESS
          allOf:
            - $ref: '#/components/schemas/RuleType'
    NetworkAcl:
      type: object
      properties:
        name:
          type: string
          description: The name of the  resource.
          example: My resource
        vpcId:
          type: string
          description: The vpcId for this network ACL.
    NetworkAclRule:
      required:
        - protocol
        - networkAclId
      type: object
      properties:
        name:
          type: string
          description: The name of the  resource.
          example: My resource
        networkAclId:
          type: string
          format: uuid
          description: The uuid of the network acl to which the rule belongs to
          example: fde83b97-f515-420c-ab10-b3cfaaf45155
        type:
          type: string
          description: >-
            The type of the rule. If not specified, the default INGRESS
            value is used.
          example: INGRESS
          allOf:
            - $ref: '#/components/schemas/RuleType'
        protocol:
          type: string
          description: >-
            The protocol for the rule. Property cannot be modified after it is
            created (disallowed in update requests).
          example: TCP
          enum:
            - TCP
            - UDP
            - ICMP
            - ICMPv6
            - GRE
            - VRRP
            - ESP
            - AH
            - ANY
        sourceCidr:
          type: string
          description: >-
            Only traffic originating from the respective IP address (or CIDR
            block) is allowed. Value null allows traffic from any IP address
            (according to the selected ipVersion).
          nullable: true
          example: 22.231.113.64/24
        targetCidr:
          type: string
          description: >-
            If the target NIC has multiple IP addresses, only the traffic
            directed to the respective IP address (or CIDR block) of the NIC is
            allowed. Value null allows traffic to any target IP address
            (according to the selected ipVersion).
          nullable: true
          example: 22.231.113.64/24
        portRangeStart:
          maximum: 65535
          minimum: 1
          type: integer
          description: >-
            Defines the start range of the allowed port (from 1 to 65535) if
            protocol TCP or UDP is chosen. Leave portRangeStart and portRangeEnd
            value null to allow all ports.
          format: int32
          example: 8
        portRangeEnd:
          maximum: 65535
          minimum: 1
          type: integer
          description: >-
            Defines the end range of the allowed port (from 1 to 65535) if the
            protocol TCP or UDP is chosen. Leave portRangeStart and portRangeEnd
            null to allow all ports.
          format: int32
          example: 8
        action:
          type: string
          description: >-
            Whether to allow or deny the specified traffic.
          example: ALLOW
          enum:
            - ALLOW
            - DENY
        priority:
          type: integer
          format: int32
          description: >-
            The priority of the rule.
          example: 1
        icmpCode:
          maximum: 254
          minimum: 0
          type: integer
          description: >-
            Defines the allowed code (from 0 to 254) if protocol ICMP or ICMPv6
            is chosen. Value null allows all codes.
          format: int32
          nullable: true
          example: 0
        icmpType:
          maximum: 254
          minimum: 0
          type: integer
          description: >-
            Defines the allowed type (from 0 to 254) if the protocol ICMP or
            ICMPv6 is chosen. Value null allows all types.
          format: int32
          nullable: true
          example: 8
    RuleType:
      type: string
      enum:
        - BIDIRECTIONAL
        - INGRESS
        - EGRESS
    Location:
      type: object
      properties:
        name:
          type: string
          description: The location name.
          example: berlin
        region:
          type: string
          description: The regions where the location is
          example: de
        features:
          type: array
          description: A list of available features in the location.
          readOnly: true
          example:
            - cloud-init-private-image
            - ssd
          items:
            type: string
        imageAliases:
          type: array
          description: A list of image aliases available in the location.
          readOnly: true
          example:
            - windows:2012r2_iso
            - windows:2019_iso
            - ubuntu:18.04_iso
          items:
            type: string
        cpuArchitecture:
          type: array
          description: >-
            A list of available CPU types and related resources available in the
            location.
          readOnly: true
          items:
            $ref: '#/components/schemas/CpuArchitectureProperties'
    Template:
      required:
        - cores
        - name
        - ram
        - storageSize
        - category
      type: object
      properties:
        name:
          type: string
          description: The resource name.
          example: My resource
        cores:
          type: number
          description: The CPU cores count.
          example: 2
        ram:
          type: number
          description: The RAM size in MB.
          example: 2048
        storageSize:
          type: number
          description: The storage size in GB.
          example: 10
        category:
          type: string
          description: The description of the template.
          example: Template category
    ElementMetadata:
      readOnly: true
      allOf:
        - $ref: '#/components/schemas/Metadata'
        - type: object
          properties:
            etag:
              type: string
              description: >-
                Resource's Entity Tag as defined in
                http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.11
              readOnly: true
              example: 45480eb3fbfc31f1d916c1eaa4abdcc3
            state:
              type: string
              description: >-
                State of the resource. *AVAILABLE* There are no pending modification
                requests for this item; *BUSY* There is at least one modification
                request pending and all following requests will be queued;
                *INACTIVE* Resource has been de-provisioned;
              readOnly: true
              example: AVAILABLE
              enum:
                - AVAILABLE
                - INACTIVE
                - BUSY
                - DEPLOYING
                - ACTIVE
                - FAILED
                - SUSPENDED
                - FAILED_SUSPENDED
                - UPDATING
                - FAILED_UPDATING
                - DESTROYING
                - FAILED_DESTROYING
                - TERMINATED
                - HIBERNATING
                - FAILED_HIBERNATING
                - MAINTENANCE
                - FAILED_MAINTENANCE
                - UNKNOWN
    IpConsumer:
      type: object
      properties:
        ip:
          type: string
          description: The IP of the consumer.
        mac:
          type: string
          description: The description of the consumer.
        nicId:
          type: string
          format: uuid
          description: The nic where the IP exists.
        serverId:
          type: string
          description: The server where the IP exists.
        serverName:
          type: string
          description: The server name where the IP exists.
        datacenterId:
          type: string
          description: The datacenter where the IP exists.
        datacenterName:
          type: string
          description: The name of the datacenter where the IP exists.
    ApplicationType:
      type: string
      example: MSSQL-2019-Standard
      description: The type of application that is hosted on this volume
      default: UNKNOWN
      x-extensible-enum:
        - MSSQL-2019-Web
        - MSSQL-2019-Standard
        - MSSQL-2019-Enterprise
        - MSSQL-2022-Web
        - MSSQL-2022-Standard
        - MSSQL-2022-Enterprise
        - UNKNOWN
    CpuArchitectureProperties:
      type: object
      properties:
        cpuFamily:
          type: string
          description: A valid CPU family name.
          example: INTEL_ICELAKE
        maxCores:
          type: integer
          description: The maximum number of cores available.
          format: int32
          example: 62
        maxRam:
          type: integer
          description: The maximum RAM size in MB.
          format: int32
          example: 245760
        vendor:
          type: string
          description: A valid CPU vendor name.
          example: AuthenticAMD
    ExposeSerial:
      type: boolean
      description: >-
        If set to `true` will expose the serial id of the disk attached to the server. If
        set to `false` will not expose the serial id. Some operating systems or software
        solutions require the serial id to be exposed to work properly. Exposing the serial
        can influence licensed software (e.g. Windows) behavior
      example: true
      default: false
    IPFailover:
      type: object
      properties:
        ip:
          type: string
          description: the exact ip to be used in ip failover.
          example: 192.18.2.231
        nicUuid:
          type: string
          description: The nic id where the IP is attached.
          example: 3c11273c-b3e1-4ca3-8134-84fd2dd4ebec
    ResourceReference:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: The resource's unique identifier.
          example: 15f67991-0f51-4efc-a8ad-ef1fb31a480c
    Error:
      description: |
        The Error object is used to represent an error response from the API.
      type: object
      properties:
        httpStatus:
          type: integer
          description: The HTTP status code of the operation.
          example: 400
        messages:
          type: array
          description: |
            A list of error messages.
          items:
            type: object
            properties:
              errorCode:
                type: string
                description: |
                  Application internal error code
                example: "err-1234"
              message:
                type: string
                description: |
                  A human readable explanation specific to this occurrence of the
                  problem.
                example: "Error message example"
    Metadata:
      type: object
      description: Metadata of the resource.
      properties:
        createdDate:
          type: string
          format: date-time
          description: The ISO 8601 creation timestamp.
          example: "2020-12-10T13:37:50+01:00"
          readOnly: true
        createdBy:
          type: string
          description: Unique name of the identity that created the resource.
          example: "ionos:identity:::users/87f9a82e-b28d-49ed-9d04-fba2c0459cd3"
          readOnly: true
        createdByUserId:
          type: string
          description: Unique id of the identity that created the resource.
          example: 87f9a82e-b28d-49ed-9d04-fba2c0459cd3
          readOnly: true
        lastModifiedDate:
          type: string
          format: date-time
          description: The ISO 8601 modified timestamp.
          example: "2020-12-11T13:37:50+01:00"
          readOnly: true
        lastModifiedBy:
          type: string
          description: Unique name of the identity that last modified the resource.
          example: "ionos:identity:::users/87f9a82e-b28d-49ed-9d04-fba2c0459cd3"
          readOnly: true
        lastModifiedByUserId:
          type: string
          description: Unique id of the identity that last modified the resource.
          example: 87f9a82e-b28d-49ed-9d04-fba2c0459cd3
          readOnly: true
        resourceURN:
          type: string
          description: Unique name of the resource.
          example: "ionos:<product>:<location>:<contract>:<resource-path>"
          readOnly: true
    Pagination:
      required:
      - offset
      - limit
      - _links
      description: |
        Pagination information. The offset and limit parameters are used to
        navigate the list of elements. The _links object contains URLs to
        navigate the different pages.
      type: object
      properties:
        offset:
          $ref: '#/components/schemas/Offset'
        limit:
          $ref: '#/components/schemas/Limit'
        _links:
          $ref: '#/components/schemas/Links'
    
    Offset:
      description: |
        The offset specified in the request (if none was specified, the default
        offset is 0).
      type: integer
      example: 0
      minimum: 0
      readOnly: true
    Limit:
      description: |
        The limit specified in the request (if none was specified, use the
        endpoint's default pagination limit).
      type: integer
      example: 42
      minimum: 0
      readOnly: true
    Links:
      description: |
        URLs to navigate the different pages. As of now we always only return a
        single page.
      type: object
      properties:
        prev:
          description: |
            URL (with offset and limit parameters) of the previous page; only
            present if offset is greater than 0.
          type: string
          format: uri
          example: http://PREVIOUS-PAGE-URI
          readOnly: true
        self:
          description: |
            URL (with offset and limit parameters) of the current page.
          type: string
          format: uri
          example: http://THIS-PAGE-URI
          readOnly: true
        next:
          description: |
            URL (with offset and limit parameters) of the next page; only
            present if offset + limit is less than the total number of elements.
          type: string
          format: uri
          example: http://NEXT-PAGE-URI
          readOnly: true
  securitySchemes:
    tokenAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        The token can be generated using the 
        [Authentication API](https://api.ionos.com/docs/authentication/v1/#tag/tokens/operation/tokensGenerate).
  responses:
    BadRequest:
      description: |
        ### Bad Request
        The request send to the API was malformed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: |
        ### Unauthorized
        The request is missing authorization information or the authorization information provided are expired.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotAllowed:
      description: |
        ### Not Allowed
        The user issuing the request does not have the needed permissions.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: |
        ### Conflict
        The UUID is already taken by another party, follow the guides to generate UUIDs uniquely.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: |
        ### Not Found
        The resource that was requested could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnexpectedError:
      description: |
        ### Unexpected Internal Server Error
        An unexpected internal error occurred. We apologize for the inconvenience!
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnprocessableEntity:
      description: |
        ### Unprocessable Entity
        The request was well-formed but was unable to be followed due to semantic errors.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    TooManyRequests:
      description: |
        ### Too Many Requests
        The user has sent too many requests in a given amount of time.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnsupportedMediaType:
      description: |
        ### Unsupported Media Type
        The request has an unsupported media type.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalError:
      description: |
        ### Internal Server Error
        An internal error occurred. We apologize for the inconvenience!
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServiceUnavailable:
      description: |
        ### Service Unavailable
        The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  parameters:
    paginationOffset:
      name: offset
      in: query
      description: The first element (of the total list of elements) to include in the response. Use this parameter together with the limit for pagination.
      required: false
      schema:
        type: integer
        format: int32
        default: 0
        minimum: 0
      example: 0
    paginationLimit:
      name: limit
      in: query
      description: The maximum number of elements to return. Use this parameter together with the offset for pagination.
      required: false
      schema:
        type: integer
        format: int32
        default: 100
        minimum: 1
        maximum: 1000
      example: 100
    contractNumber:
      name: "X-Contract-Number"
      in: header
      description: |
        Users with multiple contracts must provide the contract number,
        for which all API requests are to be executed.
      required: false
      schema:
        type: integer
        format: int32
    vpc:
      name: "filter.vpc"
      in: query
      description: Filter resources by vpc.
      required: false
      schema:
        type: string
    datacenter:
      name: "filter.datacenter"
      in: query
      description: Filter resources by datacenter.
      required: false
      schema:
        type: string
    server:
      name: "filter.server"
      in: query
      description: Filter resources by server.
      required: false
      schema:
        type: string
    lan:
      name: "filter.lan"
      in: query
      description: Filter resources by lan.
      required: false
      schema:
        type: string
    nic:
      name: "filter.nic"
      in: query
      description: Filter resources by nic.
      required: false
      schema:
        type: string
    routetable:
      name: "filter.routetable"
      in: query
      description: Filter resources by route table.
      required: false
      schema:
        type: string
    securitygroup:
      name: "filter.securitygroup"
      in: query
      description: Filter resources by security group.
      required: false
      schema:
        type: string
    nacl:
      name: "filter.nacl"
      in: query
      description: Filter resources by network acl.
      required: false
      schema:
        type: string
