openapi: 3.0.3
info:
  title: CLOUD API
  description: >-

    IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be
    managed through the Cloud API, in addition or as an alternative to the "Data
    Center Designer" (DCD) browser-based tool. 

     Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
  version: '7.0'
  x-sdk-patch-level: 5
servers:
  - url: https://api.ionos.com/cloudapi/v7
tags:
  - name: Virtual Private Clouds
  - name: Data centers
  - name: Virtual routers
  - name: Virtual routes
  - name: Servers
  - name: CD-ROMs
  - name: LANs
  - name: Network interfaces
  - name: Images
  - name: Volumes
  - name: Snapshots
  - name: IP blocks
  - name: Security Groups
  - name: IP Rules
  - name: Flow Logs
  - name: Metadata
paths:
  /vpcs:
    get:
      tags:
        - Virtual Private Clouds
      summary: List your VPCs
      description: >-
        List the virtual private clouds for your account.
      operationId: vpcGet
      parameters:
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: >-
            The first element (from the complete list of the elements) to
            include in the response (used together with <b><i>limit</i></b> for
            pagination).
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          description: >-
            The maximum number of elements to return (use together with offset
            for pagination).
          schema:
            maximum: 10000
            minimum: 1
            type: integer
            format: int32
            default: 1000
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vpcs'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
    post:
      tags:
        - Virtual Private Clouds
      summary: Create a Vpc
      description: >-
        Creates a new Virtual Private Cloud.
        
        A virtual private cloud (VPC) is a secure, isolated private cloud 
        where you can run datacenters, servers, network interfaces.
        The private cloud is hosted remotely by a public cloud provider.
      operationId: vpcsPost
      parameters:
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The vpc to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vpc'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vpc'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: vpc
  /vpcs/{vpcId}:
    get:
      tags:
        - Virtual Private Clouds
      summary: Retrieve vpcs
      description: >-
        Retrieve vpcs by resource ID. This value is in the response body
        when the vpc is created, and in the list of the vpcs,
        returned by GET.
      operationId: vpcsFindById
      parameters:
        - name: vpcId
          in: path
          description: The unique ID of the vpc.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vpc'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: [ ]
        - TokenAuthentication: [ ]
    put:
      tags:
        - Virtual Private Clouds
      summary: Modify a Vpc by ID
      description: >-
        Modifies the properties of the specified vpc, rename it, or
        change the description.
      operationId: vpcsPut
      parameters:
        - name: vpcId
          in: path
          description: The unique ID of the vpc.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The modified data center.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vpc'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vpc'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: [ ]
        - TokenAuthentication: [ ]
      x-codegen-request-body-name: vpc
    patch:
      tags:
        - Virtual Private Clouds
      summary: Partially modify a Vpc by ID
      description: >-
        Updates the properties of the specified vpc, rename it, or
        change the description.
      operationId: vpcsPatch
      parameters:
        - name: vpcId
          in: path
          description: The unique ID of the vpc.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The properties of the vpc to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VpcProperties'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vpc'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: [ ]
        - TokenAuthentication: [ ]
      x-codegen-request-body-name: vpc
    delete:
      tags:
        - Virtual Private Clouds
      summary: Delete vpcs
      description: >-
        Delete the specified vpc and all the elements it contains. This
        method is destructive and should be used carefully.
      operationId: vpcsDelete
      parameters:
        - name: vpcId
          in: path
          description: The unique ID of the vpc.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content: { }
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: [ ]
        - TokenAuthentication: [ ]
  /datacenters:
    get:
      tags:
        - Data centers
      summary: List your data centers
      description: >-
        List the data centers for your account. Default limit is the first 100
        items; use pagination query parameters for listing more items.
      operationId: datacentersGet
      parameters:
        - name: vpcId
          in: query
          description: The unique ID of the vpc
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: >-
            The first element (from the complete list of the elements) to
            include in the response (used together with <b><i>limit</i></b> for
            pagination).
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          description: >-
            The maximum number of elements to return (use together with offset
            for pagination).
          schema:
            maximum: 10000
            minimum: 1
            type: integer
            format: int32
            default: 1000
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Datacenters'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
    post:
      tags:
        - Data centers
      summary: Create a Data Center
      description: >-
        Creates new data centers. A new datacenter can be standalone or be part
        of a Virtual Private Cloud.

        Virtual data centers are the foundation of the platform; they act as
        logical containers for all other objects you create, such as servers and
        storage volumes. You can provision as many data centers as needed. Data
        centers have their own private networks and are logically segmented from
        each other to create isolation.
      operationId: datacentersPost
      parameters:
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The data center to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Datacenter'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Datacenter'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: datacenter
  /datacenters/{datacenterId}:
    get:
      tags:
        - Data centers
      summary: Retrieve data centers
      description: >-
        Retrieve data center by resource ID. This value is in the response body
        when the data center is created, and in the list of the data centers,
        returned by GET.
      operationId: datacentersFindById
      parameters:
        - name: datacenterId
          in: path
          description: The unique ID of the data center.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Datacenter'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
    put:
      tags:
        - Data centers
      summary: Modify a Data Center by ID
      description: >-
        Modifies the properties of the specified data center, rename it, or
        change the description.
      operationId: datacentersPut
      parameters:
        - name: datacenterId
          in: path
          description: The unique ID of the data center.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The modified data center.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Datacenter'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Datacenter'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: datacenter
    patch:
      tags:
        - Data centers
      summary: Partially modify a Data Center by ID
      description: >-
        Updates the properties of the specified data center, rename it, or
        change the description.
      operationId: datacentersPatch
      parameters:
        - name: datacenterId
          in: path
          description: The unique ID of the data center.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The properties of the data center to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatacenterProperties'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Datacenter'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: datacenter
    delete:
      tags:
        - Data centers
      summary: Delete data centers
      description: >-
        Delete the specified data center and all the elements it contains. This
        method is destructive and should be used carefully.
      operationId: datacentersDelete
      parameters:
        - name: datacenterId
          in: path
          description: The unique ID of the data center.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content: {}
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
  /servers:
    get:
      tags:
        - Servers
      summary: List servers
      description: List all servers within the vpc or data center.
      operationId: serversGet
      parameters:
        - name: vpcId
          in: query
          description: The unique ID of the vpc.
          schema:
            type: string
        - name: datacenterId
          in: query
          description: The unique ID of the data center.
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: >-
            The first element (from the complete list of the elements) to
            include in the response (used together with <b><i>limit</i></b> for
            pagination).
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          description: >-
            The maximum number of elements to return (use together with offset
            for pagination).
          schema:
            maximum: 10000
            minimum: 1
            type: integer
            format: int32
            default: 1000
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Servers'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
    post:
      tags:
        - Servers
      summary: Create a Server
      description: >-
        Creates a server within the specified data center or vpc.
      operationId: serversPost
      parameters:
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The server to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Server'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: server
  /servers/{serverId}:
    get:
      tags:
        - Servers
      summary: Retrieve servers by ID
      description: >-
        Retrieve information about the specified server ,
        such as its configuration, provisioning status, and so on.
      operationId: serversFindById
      parameters:
        - name: serverId
          in: path
          description: The unique ID of the server.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
    put:
      tags:
        - Servers
      summary: Modify a Server by ID
      description: >-
        Modifies the properties of the specified server within the data center.
      operationId: serversPut
      parameters:
        - name: serverId
          in: path
          description: The unique ID of the server.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The modified server
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Server'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: server
    patch:
      tags:
        - Servers
      summary: Partially modify servers
      description: Update the properties of the specified server within the data center.
      operationId: serversPatch
      parameters:
        - name: serverId
          in: path
          description: The unique ID of the server.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The properties of the server to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerProperties'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: server
    delete:
      tags:
        - Servers
      summary: Delete servers
      description: >-
        Delete the specified server in your data center. The attached storage
        volumes will also be removed if the query parameter is set to true
        otherwise a separate API call must be made for these actions.
      operationId: serversDelete
      parameters:
        - name: serverId
          in: path
          description: The unique ID of the server.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
        - name: deleteVolumes
          in: query
          description: If true, all attached storage volumes will also be deleted.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content: {}
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
  /volumes:
    get:
      tags:
        - Volumes
      summary: Get Volumes
      description: Lists all volumes.
      operationId: volumesGet
      parameters:
        - name: vpcId
          in: query
          description: The unique ID of the vpc.
          schema:
            type: string
        - name: datacenterId
          in: query
          description: The unique ID of the data center.
          schema:
            type: string
        - name: serverId
          in: query
          description: The unique ID of the server.
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: >-
            The first element (from the complete list of the elements) to
            include in the response (used together with <b><i>limit</i></b> for
            pagination).
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          description: >-
            The maximum number of elements to return (use together with offset
            for pagination).
          schema:
            maximum: 10000
            minimum: 1
            type: integer
            format: int32
            default: 1000
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volumes'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
    post:
      tags:
        - Volumes
      summary: Create or attach a Volume to a Server
      description: >-
        Creates or attaches an existing storage volume to the specified server.


        You can create and optionally attach an existing volume in the VDC to a server.
        To move a volume from one server to another, you must first detach the volume from
        the first server and attach it to the second server.


        It is also possible to create and attach a volume in one step by simply
        providing a new volume description as a payload. The only difference is
        the URL; see 'Creating a Volume' for details about volumes.


        Note that the combined total of attached volumes and NICs cannot exceed
        24 per server.
      operationId: volumesPost
      parameters:
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The volume to be attached (or created and attached).
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Volume'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: volume
  /volumes/{volumeId}:
    get:
      tags:
        - Volumes
      summary: Get Volume by ID
      description: Retrieves the properties of the volume.
      operationId: volumesFindById
      parameters:
        - name: volumeId
          in: path
          description: The unique ID of the volume.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
    delete:
      tags:
        - Volumes
      summary: Detach a Volume by ID
      description: >-
        Detachs the specified volume from the server.


        Note that only the volume's connection to the specified server is
        disconnected. If you want to delete the volume, you must submit a
        separate request to perform the deletion.
      operationId: volumesDelete
      parameters:
        - name: volumeId
          in: path
          description: The unique ID of the volume.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content: {}
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
  /cdroms:
    get:
      tags:
        - CD-ROMs
      summary: 'Get Attached CD-ROMs '
      description: Lists all CD-ROMs attached to the specified server.
      operationId: cdromsGet
      parameters:
        - name: vpcId
          in: query
          description: The unique ID of the vpc.
          schema:
            type: string
        - name: datacenterId
          in: query
          description: The unique ID of the data center.
          schema:
            type: string
        - name: serverId
          in: query
          description: The unique ID of the server.
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: >-
            The first element (from the complete list of the elements) to
            include in the response (used together with <b><i>limit</i></b> for
            pagination).
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          description: >-
            The maximum number of elements to return (use together with offset
            for pagination).
          schema:
            maximum: 10000
            minimum: 1
            type: integer
            format: int32
            default: 1000
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cdroms'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
    post:
      tags:
        - CD-ROMs
      summary: Attach a CD-ROM
      description: >-
        Attachs a CD-ROM to an existing server specified by its ID. 


        CD-ROMs cannot be created stand-alone like volumes. They are either
        attached to a server or do not exist. They always have an ISO-Image
        associated; empty CD-ROMs can not be provisioned. It is possible to
        attach up to two CD-ROMs to the same server. 


        Note that attaching a CD-ROM leads to a reset of the server.
      operationId: cdromsPost
      parameters:
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The CD-ROM to be attached.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Image'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: cdrom
  /cdroms/{cdromId}:
    get:
      tags:
        - CD-ROMs
      summary: Get Attached CD-ROM by ID
      description: Retrieves the properties of the CD-ROM attached to the specified server.
      operationId: cdromsFindById
      parameters:
        - name: vpcId
          in: query
          description: The unique ID of the vpc.
          schema:
            type: string
        - name: datacenterId
          in: query
          description: The unique ID of the data center.
          schema:
            type: string
        - name: serverId
          in: query
          description: The unique ID of the server.
          schema:
            type: string
        - name: cdromId
          in: path
          description: The unique ID of the CD-ROM.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
    delete:
      tags:
        - CD-ROMs
      summary: Detach a CD-ROM by ID
      description: |-
        Detachs the specified CD-ROM from the server.

        Detaching a CD-ROM deletes the CD-ROM. The image will not be deleted.

        Note that detaching a CD-ROM leads to a reset of the server.
      operationId: cdromsDelete
      parameters:
        - name: cdromId
          in: path
          description: The unique ID of the CD-ROM.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content: {}
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
  /servers/{serverId}/operations:
    post:
      tags:
        - Servers
      summary: Request an operation from the servers
      description: >-
        Performs and of the specified server within the data center.
      operationId: serversRequestsPost
      parameters:
        - name: serverId
          in: path
          description: The unique ID of the server.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The operation on the server
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerOperation'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerOperationResponse'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
  /images:
    get:
      tags:
        - Images
      summary: List images
      description: List all the images in the current contract.
      operationId: imagesGet
      parameters:
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Images'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
  /images/{imageId}:
    get:
      tags:
        - Images
      summary: Retrieve images
      description: Retrieve the properties of the specified image.
      operationId: imagesFindById
      parameters:
        - name: imageId
          in: path
          description: The unique ID of the image.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
    put:
      tags:
        - Images
      summary: Modify an Image by ID
      description: Modifies the properties of the specified image.
      operationId: imagesPut
      parameters:
        - name: imageId
          in: path
          description: The unique ID of the image.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The modified image
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Image'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: image
    patch:
      tags:
        - Images
      summary: Partially modify images
      description: Update the properties of the specified image.
      operationId: imagesPatch
      parameters:
        - name: imageId
          in: path
          description: The unique ID of the image.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The image properties to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageProperties'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: image
    delete:
      tags:
        - Images
      summary: Delete images
      description: >-
        Delete the specified image; this operation is only supported for private
        images.
      operationId: imagesDelete
      parameters:
        - name: imageId
          in: path
          description: The unique ID of the image.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content: {}
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
  /volumes/{volumeId}/restore-snapshot:
    post:
      tags:
        - Volumes
      summary: Restore volume snapshots
      description: >-
        Restore a snapshot for the specified volume within the data center. A
        snapshot is an image of a volume, which can be used to restore this
        volume at a later time.
      operationId: volumesRestore-snapshotPost
      parameters:
        - name: volumeId
          in: path
          description: The unique ID of the volume.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The payload used to restore a snapshot.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestoreSnapshot'
        required: false
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content: {}
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: Restore snapshot
  /snapshots:
    get:
      tags:
        - Snapshots
      summary: List snapshots
      description: List all available snapshots.
      operationId: snapshotsGet
      parameters:
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Snapshots'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
    post:
      tags:
        - Snapshots
      summary: Create a snapshot from a volume
      description: >-
        Create a snapshot of the specified volume; 
        this snapshot can later be used to restore this volume.
      operationId: volumesCreate-snapshotPost
      parameters:
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The payload of the snapshot.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSnapshot'
        required: false
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Snapshot'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: Snapshot
  /snapshots/{snapshotId}:
    get:
      tags:
        - Snapshots
      summary: Retrieve snapshots by ID
      description: Retrieve the properties of the specified snapshot.
      operationId: snapshotsFindById
      parameters:
        - name: snapshotId
          in: path
          description: The unique ID of the snapshot.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Snapshot'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
    put:
      tags:
        - Snapshots
      summary: Modify a Snapshot by ID
      description: Modifies the properties of the specified snapshot.
      operationId: snapshotsPut
      parameters:
        - name: snapshotId
          in: path
          description: The unique ID of the snapshot.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The modified snapshot
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Snapshot'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Snapshot'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: snapshot
    patch:
      tags:
        - Snapshots
      summary: Partially modify snapshots
      description: Update the properties of the specified snapshot.
      operationId: snapshotsPatch
      parameters:
        - name: snapshotId
          in: path
          description: The unique ID of the snapshot.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The properties of the snapshot to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SnapshotProperties'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Snapshot'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: snapshot
    delete:
      tags:
        - Snapshots
      summary: Delete snapshots
      description: Deletes the specified snapshot.
      operationId: snapshotsDelete
      parameters:
        - name: snapshotId
          in: path
          description: The unique ID of the snapshot.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content: {}
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
  /ipblocks:
    get:
      tags:
        - IP blocks
      summary: 'List IP blocks '
      description: List all reserved IP blocks.
      operationId: ipblocksGet
      parameters:
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: >-
            The first element (from the complete list of the elements) to
            include in the response (used together with <b><i>limit</i></b> for
            pagination).
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          description: >-
            The maximum number of elements to return (use together with offset
            for pagination).
          schema:
            maximum: 1000
            minimum: 1
            type: integer
            format: int32
            default: 100
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IpBlocks'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
    post:
      tags:
        - IP blocks
      summary: Reserve a IP Block
      description: Reserves a new IP block.
      operationId: ipblocksPost
      parameters:
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The IP block to be reserved.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IpBlock'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IpBlock'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: ipblock
  /ipblocks/{ipblockId}:
    get:
      tags:
        - IP blocks
      summary: Retrieve IP blocks
      description: Retrieve the properties of the specified IP block.
      operationId: ipblocksFindById
      parameters:
        - name: ipblockId
          in: path
          description: The unique ID of the IP block.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IpBlock'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
    put:
      tags:
        - IP blocks
      summary: Modify a IP Block by ID
      description: Modifies the properties of the specified IP block.
      operationId: ipblocksPut
      parameters:
        - name: ipblockId
          in: path
          description: The unique ID of the IP block.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The modified IP block.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IpBlock'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IpBlock'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: ipblock
    patch:
      tags:
        - IP blocks
      summary: Partially modify IP blocks
      description: Update the properties of the specified IP block.
      operationId: ipblocksPatch
      parameters:
        - name: ipblockId
          in: path
          description: The unique ID of the IP block.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The properties of the IP block to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IpBlockProperties'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IpBlock'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: ipblock
    delete:
      tags:
        - IP blocks
      summary: Delete IP blocks
      description: Remove the specified IP block.
      operationId: ipblocksDelete
      parameters:
        - name: ipblockId
          in: path
          description: The unique ID of the IP block.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content: {}
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
  /lans:
    get:
      tags:
        - LANs
      summary: List LANs
      description: List all LANs within the data center.
      operationId: lansGet
      parameters:
        - name: vpcId
          in: query
          description: The unique ID of the vpc.
          schema:
            type: string
        - name: datacenterId
          in: query
          description: The unique ID of the data center.
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: >-
            The first element (from the complete list of the elements) to
            include in the response (used together with <b><i>limit</i></b> for
            pagination).
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          description: >-
            The maximum number of elements to return (use together with offset
            for pagination).
          schema:
            maximum: 10000
            minimum: 1
            type: integer
            format: int32
            default: 1000
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lans'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
    post:
      tags:
        - LANs
      summary: Create LANs
      description: Creates a LAN within a vpc or a data center.
      operationId: lansPost
      parameters:
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The LAN to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lan'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lan'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: lan
  /lans/{lanId}:
    get:
      tags:
        - LANs
      summary: Retrieve LANs
      description: Retrieve the properties of the specified LAN.
      operationId: lansFindById
      parameters:
        - name: lanId
          in: path
          description: The unique ID of the LAN.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lan'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
    put:
      tags:
        - LANs
      summary: Modify LANs
      description: Modify the properties of the specified LAN.
      operationId: lansPut
      parameters:
        - name: lanId
          in: path
          description: The unique ID of the LAN.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The modified LAN
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lan'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lan'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: lan
    patch:
      tags:
        - LANs
      summary: Partially modify LANs
      description: Update the properties of the specified LAN.
      operationId: lansPatch
      parameters:
        - name: lanId
          in: path
          description: The unique ID of the LAN.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The properties of the LAN to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LanProperties'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lan'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: lan
    delete:
      tags:
        - LANs
      summary: Delete LANs
      description: Delete the specified LAN.
      operationId: lansDelete
      parameters:
        - name: lanId
          in: path
          description: The unique ID of the LAN.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content: {}
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
  /nics:
    get:
      tags:
        - Network interfaces
      summary: List Nics
      description: List all NICs, attached to the specified Resource.
      operationId: nicsGet
      parameters:
        - name: vpcId
          in: query
          description: The unique ID of the vpc.
          schema:
            type: string
        - name: datacenterId
          in: query
          description: The unique ID of the data center.
          schema:
            type: string
        - name: serverId
          in: query
          description: The unique ID of the server.
          schema:
            type: string
        - name: lanId
          in: query
          description: The unique ID of the LAN.
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: >-
            The first element (from the complete list of the elements) to
            include in the response (used together with <b><i>limit</i></b> for
            pagination).
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          description: >-
            The maximum number of elements to return (use together with offset
            for pagination).
          schema:
            maximum: 10000
            minimum: 1
            type: integer
            format: int32
            default: 1000
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Nics'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
    post:
      tags:
        - Network interfaces
      summary: Create NICs
      description: Create a NIC to the specified Resource.
      operationId: nicsPost
      parameters:
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The NIC to be attached.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Nic'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Nic'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: nic
  /nics/{nicId}:
    get:
      tags:
        - Network interfaces
      summary: Retrieve  NICs
      description: Retrieve the properties of the NIC.
      operationId: nicsFindById
      parameters:
        - name: nicId
          in: path
          description: The unique ID of the NIC.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Nic'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
    put:
      tags:
        - Network interfaces
      summary: Modify NICs
      description: Modify the properties of the specified NIC.
      operationId: nicsPut
      parameters:
        - name: nicId
          in: path
          description: The unique ID of the NIC.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The modified NIC
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Nic'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Nic'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: nic
    patch:
      tags:
        - Network interfaces
      summary: Partially modify NICs
      description: Update the properties of the specified NIC.
      operationId: nicsPatch
      parameters:
        - name: nicId
          in: path
          description: The unique ID of the NIC.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The properties of the NIC to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NicProperties'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Nic'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: nic
    delete:
      tags:
        - Network interfaces
      summary: Delete NICs
      description: Remove the specified NIC.
      operationId: nicsDelete
      parameters:
        - name: nicId
          in: path
          description: The unique ID of the NIC.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content: {}
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
  /routers:
    get:
      tags:
        - Virtual routers
      summary: List virtual routers
      description: Retrieves all virtual routers within the vpc.
      operationId: routersGet
      parameters:
        - name: vpcId
          in: query
          description: The unique ID of the vpc.
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: >-
            The first element (from the complete list of the elements) to
            include in the response (used together with <b><i>limit</i></b> for
            pagination).
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          description: >-
            The maximum number of elements to return (use together with offset
            for pagination).
          schema:
            maximum: 10000
            minimum: 1
            type: integer
            format: int32
            default: 1000
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualRouters'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
    post:
      tags:
        - Virtual routers
      summary: Create a virtual router
      description: Creates a virtual router within the specified vpc.
      operationId: routersPost
      parameters:
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The virtual router to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualRouterRequest'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualRouter'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: router
  /routers/{routerId}:
    get:
      tags:
        - Virtual routers
      summary: Retrieve a virtual router
      description: Retrieves the properties of the specified virtual router.
      operationId: routersFindById
      parameters:
        - name: routerId
          in: path
          description: The unique ID of the virtual router.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualRouter'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
    put:
      tags:
        - Virtual routers
      summary: Modify a virtual router
      description: Modifies the properties of the specified virtual router.
      operationId: routersPut
      parameters:
        - name: routerId
          in: path
          description: The unique ID of the virtual router.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The modified virtual router
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualRouterRequest'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualRouter'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: router
    patch:
      tags:
        - Virtual routers
      summary: Partially modify a virtual router
      description: Modifies the properties of the specified virtual router.
      operationId: routersPatch
      parameters:
        - name: routerId
          in: path
          description: The unique ID of the virtual router.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The properties of the virtual router to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualRouterRequestProperties'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualRouter'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: router
    delete:
      tags:
        - Virtual routers
      summary: Delete a virtual router
      description: >-
        Removes the specified virtual router from the data center. Virtual router
        can be deleted only if it is not assigned to any LANs or NICs and if it
        is not a default router. 
        Once the virtual router is deleted, all it's virtual routes will also be 
        removed.
      operationId: routersDelete
      parameters:
        - name: routerId
          in: path
          description: The unique ID of the virtual router.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content: { }
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
  /routes:
    get:
      tags:
        - Virtual routes
      summary: List virtual routes
      description: Retrieves all virtual routes for the specified virtual router.
      operationId: routesGet
      parameters:
        - name: vpcId
          in: query
          description: The unique ID of the vpc.
          schema:
            type: string
        - name: routerId
          in: query
          description: The unique ID of the virtual router.
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: >-
            The first element (from the complete list of the elements) to
            include in the response (used together with <b><i>limit</i></b> for
            pagination).
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          description: >-
            The maximum number of elements to return (use together with offset
            for pagination).
          schema:
            maximum: 10000
            minimum: 1
            type: integer
            format: int32
            default: 1000
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualRoutes'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
    post:
      tags:
        - Virtual routes
      summary: Create a virtual route
      description: Creates a virtual route for the specified virtual Router.
      operationId: routesPost
      parameters:
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The virtual route to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualRoute'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualRoute'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: route
  /routes/{routeId}:
    get:
      tags:
        - Virtual routes
      summary: Retrieve a virtual route
      description: Retrieves the properties of the specified virtual route.
      operationId: routesFindById
      parameters:
        - name: routeId
          in: path
          description: The unique ID of the virtual route.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualRoute'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
    put:
      tags:
        - Virtual routes
      summary: Modify a virtual route
      description: Modifies the properties of the specified virtual route.
      operationId: routesPut
      parameters:
        - name: routeId
          in: path
          description: The unique ID of the virtual route.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The modified virtual route.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualRoute'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualRoute'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: route
    patch:
      tags:
        - Virtual routes
      summary: Partially modify a virtual route
      description: Modifies the properties of the specified virtual route.
      operationId: routesPatch
      parameters:
        - name: routeId
          in: path
          description: The unique ID of the virtual route.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The properties of the virtual route to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualRouteProperties'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualRoute'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: route
    delete:
      tags:
        - Virtual routes
      summary: Delete a virtual route
      description: Removes the specified virtual route from the virtual router.
      operationId: routesDelete
      parameters:
        - name: routeId
          in: path
          description: The unique ID of the virtual route.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content: {}
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
  /flowlogs:
    get:
      tags:
        - Flow Logs
      summary: List Flow Logs
      description: List all the Flow Logs for the specified Resource.
      operationId: flowlogsGet
      parameters:
        - name: vpcId
          in: query
          description: The unique ID of the vpc.
          schema:
            type: string
        - name: datacenterId
          in: query
          description: The unique ID of the data center.
          schema:
            type: string
        - name: serverId
          in: query
          description: The unique ID of the server.
          schema:
            type: string
        - name: nicId
          in: query
          description: The unique ID of the NIC.
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: >-
            The first element (from the complete list of the elements) to
            include in the response (used together with <b><i>limit</i></b> for
            pagination).
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          description: >-
            The maximum number of elements to return (use together with offset
            for pagination).
          schema:
            maximum: 10000
            minimum: 1
            type: integer
            format: int32
            default: 1000
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlowLogs'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
    post:
      tags:
        - Flow Logs
      summary: Create a Flow Log
      description: Adds a new Flow Log for the specified NIC.
      operationId: flowlogsPost
      parameters:
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The Flow Log to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlowLog'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlowLog'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: flowlog
  /flowlogs/{flowlogId}:
    get:
      tags:
        - Flow Logs
      summary: Retrieve Flow Logs
      description: Retrieve the properties of the specified Flow Log.
      operationId: flowlogsFindById
      parameters:
        - name: flowlogId
          in: path
          description: The unique ID of the Flow Log.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlowLog'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
    put:
      tags:
        - Flow Logs
      summary: Modify Flow Logs
      description: Modify the specified Flow Log record.
      operationId: flowlogsPut
      parameters:
        - name: flowlogId
          in: path
          description: The unique ID of the Flow Log.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The modified Flow Log.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlowLog'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlowLog'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: flowlog
    patch:
      tags:
        - Flow Logs
      summary: Partially modify Flow Logs
      description: Update the specified Flow Log record.
      operationId: flowlogsPatch
      parameters:
        - name: flowlogId
          in: path
          description: The unique ID of the Flow Log.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The Flow Log record to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlowLogProperties'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlowLog'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: flowlog
    delete:
      tags:
        - Flow Logs
      summary: Delete Flow Logs
      description: Delete the specified Flow Log.
      operationId: flowlogsDelete
      parameters:
        - name: flowlogId
          in: path
          description: The unique ID of the Flow Log.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content: {}
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
  /securitygroups:
    get:
      tags:
        - Security Groups
      summary: List Security Groups
      description: Retrieve a list of available security groups.
      operationId: securitygroupsGet
      parameters:
        - name: vpcId
          in: query
          description: The unique ID of the vpc.
          schema:
            type: string
        - name: datacenterId
          in: query
          description: The unique ID of the data center.
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: The first element (from the complete list of the elements) to include in the response (used together with <b><i>limit</i></b> for pagination).
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          description: The maximum number of elements to return (use together with offset for pagination).
          schema:
            maximum: 10000
            minimum: 1
            type: integer
            format: int32
            default: 1000
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: The number of requests that can still be made without triggering a rate limit.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityGroups'
        default:
          description: >-
            Any erroneous status code:
              400 (parse error),
              401 (auth error),
              402 (trial access),
              403 (insufficient privileges),
              404 (not found),
              405 (unsupported HTTP method),
              415 (unsupported content type),
              422 (validation error),
              429 (request rate limit exceeded),
              500 (server error),
              or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
    post:
      tags:
        - Security Groups
      summary: Create a Security Group
      description: >-
        Creates a security group within the vpc or datacenter. This will allow you 
        to define which IP addresses and networks have access to your servers.
      operationId: securitygroupsPost
      parameters:
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The security group to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityGroupRequest'
        required: true
      responses:
        '202':
          description: Accepted. The request has been accepted for processing.
          headers:
            X-RateLimit-Remaining:
              description:
                The number of requests that can still be made without triggering
                a rate limit.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityGroup'
        default:
          description: >-
            Any erroneous status code:
              400 (parse error),
              401 (auth error),
              402 (trial access),
              403 (insufficient privileges),
              404 (not found),
              405 (unsupported HTTP method),
              415 (unsupported content type),
              422 (validation error),
              429 (request rate limit exceeded),
              500 (server error),
              or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: securityGroup
  /securitygroups/{securityGroupId}:
    get:
      tags:
        - Security Groups
      summary: Retrieve a Security Group
      description: Retrieves the attributes of a given Security Group.
      operationId: securitygroupsFindById
      parameters:
        - name: securityGroupId
          in: path
          description: The unique ID of the security group.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: The number of requests that can still be made without triggering a rate limit.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityGroup'
        default:
          description: >-
            Any erroneous status code:
              400 (parse error),
              401 (auth error),
              402 (trial access),
              403 (insufficient privileges),
              404 (not found),
              405 (unsupported HTTP method),
              415 (unsupported content type),
              422 (validation error),
              429 (request rate limit exceeded),
              500 (server error),
              or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
    put:
      tags:
        - Security Groups
      summary: Modify Security Group
      description:
        Modify the properties of the specified Security Group.
      operationId: securitygroupsPut
      parameters:
        - name: securityGroupId
          in: path
          description: The unique ID of the Security Group.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The modified Security Group
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityGroupRequest'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: The number of requests that can still be made without triggering a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityGroup'
        default:
          description: >-
            Any erroneous status code:
              400 (parse error),
              401 (auth error),
              402 (trial access),
              403 (insufficient privileges),
              404 (not found),
              405 (unsupported HTTP method),
              415 (unsupported content type),
              422 (validation error),
              429 (request rate limit exceeded),
              500 (server error),
              or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: securityGroup
    patch:
      tags:
        - Security Groups
      summary: Partially modify Security Group
      description:
        Modify the properties of the specified Security Group.
      operationId: securitygroupsPatch
      parameters:
        - name: securityGroupId
          in: path
          description: The unique ID of the Security Group.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The modified Security Group
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityGroupProperties'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: The number of requests that can still be made without triggering a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityGroup'
        default:
          description: >-
            Any erroneous status code:
              400 (parse error),
              401 (auth error),
              402 (trial access),
              403 (insufficient privileges),
              404 (not found),
              405 (unsupported HTTP method),
              415 (unsupported content type),
              422 (validation error),
              429 (request rate limit exceeded),
              500 (server error),
              or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: securityGroup
    delete:
      tags:
        - Security Groups
      summary: Delete a Security Group
      description: Deletes the specified Security Group.
      operationId: securitygroupsDelete
      parameters:
        - name: securityGroupId
          in: path
          description: The unique ID of the Security Group.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Accepted. The request has been accepted for processing.
          headers:
            X-RateLimit-Remaining:
              description: The number of requests that can still be made without triggering a rate limit.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent requests allowed.
              schema:
                type: integer
                format: int32
          content: {}
        default:
          description: >-
            Any erroneous status code:
              400 (parse error),
              401 (auth error),
              402 (trial access),
              403 (insufficient privileges),
              404 (not found),
              405 (unsupported HTTP method),
              415 (unsupported content type),
              422 (validation error),
              429 (request rate limit exceeded),
              500 (server error),
              or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - TokenAuthentication: []
        - BasicAuthentication: []
  /iprules:
    get:
      tags:
        - IP Rules
      summary: List IP rules
      description: List all rules for the specified Security Group.
      operationId: iprulesGet
      parameters:
        - name: vpcId
          in: query
          description: The unique ID of the vpc.
          schema:
            type: string
        - name: datacenterId
          in: query
          description: The unique ID of the data center.
          schema:
            type: string
        - name: securityGroupId
          in: query
          description: The unique ID of the security group.
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: The first element (from the complete list of the elements) to include in the response (used together with <b><i>limit</i></b> for pagination).
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          description: The maximum number of elements to return (use together with offset for pagination).
          schema:
            maximum: 10000
            minimum: 1
            type: integer
            format: int32
            default: 1000
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: The number of requests that can still be made without triggering a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirewallRules'
        default:
          description: >-
            Any erroneous status code:
              400 (parse error),
              401 (auth error),
              402 (trial access),
              403 (insufficient privileges),
              404 (not found),
              405 (unsupported HTTP method),
              415 (unsupported content type),
              422 (validation error),
              429 (request rate limit exceeded),
              500 (server error),
              or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
    post:
      tags:
        - IP Rules
      summary: Create IP rule to a Security Group
      description: Create one IP rule and attach it to the existing security group
      operationId: iprulesPost
      parameters:
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The firewall to be attached (or created and attached).
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FirewallRule'
        required: true
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: The number of requests that can still be made without triggering a rate limit.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirewallRule'
        default:
          description: >-
            Any erroneous status code:
              400 (parse error),
              401 (auth error),
              402 (trial access),
              403 (insufficient privileges),
              404 (not found),
              405 (unsupported HTTP method),
              415 (unsupported content type),
              422 (validation error),
              429 (request rate limit exceeded),
              500 (server error),
              or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - TokenAuthentication: []
        - BasicAuthentication: []
      x-codegen-request-body-name: firewallRule
  /iprules/{ruleId}:
    get:
      tags:
        - IP Rules
      summary: Retrieve IP rule by id
      description: Retrieve the properties of the specified IP rule.
      operationId: iprulesFindById
      parameters:
        - name: ruleId
          in: path
          description: The unique ID of the Security Group rule.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: The number of requests that can still be made without triggering a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirewallRule'
        default:
          description: >-
            Any erroneous status code:
              400 (parse error),
              401 (auth error),
              402 (trial access),
              403 (insufficient privileges),
              404 (not found),
              405 (unsupported HTTP method),
              415 (unsupported content type),
              422 (validation error),
              429 (request rate limit exceeded),
              500 (server error),
              or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
    put:
      tags:
        - IP Rules
      summary: Modify a IP Rule
      description: Modifies the properties of the specified IP Rule.
      operationId: iprulesPut
      parameters:
        - name: ruleId
          in: path
          description: The unique ID of the Security Group Rule.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The modified Security Group Rule.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FirewallRule'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: The number of requests that can still be made without triggering a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirewallRule'
        default:
          description: >-
            Any erroneous status code:
              400 (parse error),
              401 (auth error),
              402 (trial access),
              403 (insufficient privileges),
              404 (not found),
              405 (unsupported HTTP method),
              415 (unsupported content type),
              422 (validation error),
              429 (request rate limit exceeded),
              500 (server error),
              or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: rule
    delete:
      tags:
        - IP Rules
      summary: Remove a IP Rule from a Security Group
      description: Removes the specific IP Rule from the Security Group and delete the IP rule
      operationId: iprulesDelete
      parameters:
        - name: ruleId
          in: path
          description: The unique ID of the firewall rule.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '202':
          description: Accepted. The request has been accepted for processing.
          headers:
            X-RateLimit-Remaining:
              description: The number of requests that can still be made without triggering a rate limit.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent requests allowed.
              schema:
                type: integer
                format: int32
          content: {}
        default:
          description: >-
            Any erroneous status code:
              400 (parse error),
              401 (auth error),
              402 (trial access),
              403 (insufficient privileges),
              404 (not found),
              405 (unsupported HTTP method),
              415 (unsupported content type),
              422 (validation error),
              429 (request rate limit exceeded),
              500 (server error),
              or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - TokenAuthentication: []
        - BasicAuthentication: []
    patch:
      tags:
        - IP Rules
      summary: Partially modify IP Rules
      description: Update the properties of the specified IP rule.
      operationId: iprulesPatch
      parameters:
        - name: ruleId
          in: path
          description: The unique ID of the Security Group Rule.
          required: true
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The properties of the Security Group Rule to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FirewallRuleProperties'
        required: true
      responses:
        '202':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: The number of requests that can still be made without triggering a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirewallRule'
        default:
          description: >-
            Any erroneous status code:
              400 (parse error),
              401 (auth error),
              402 (trial access),
              403 (insufficient privileges),
              404 (not found),
              405 (unsupported HTTP method),
              415 (unsupported content type),
              422 (validation error),
              429 (request rate limit exceeded),
              500 (server error),
              or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
      x-codegen-request-body-name: rule
  /metadata/locations:
    get:
      tags:
        - Metadata
      summary: Get Locations
      description: >-
        Retrieves the available physical locations where you can deploy cloud
        resources in a VDC. 

         A location is identified by a combination of the following characters: 

         * a two-character **regionId**, which represents a country (example: 'de') 

         * a three-character **locationId**, which represents a city. The 'locationId' is typically based on the IATA code of the city's airport (example: 'txl'). 

         >Note that 'locations' are read-only and cannot be changed.
      operationId: locationsGet
      parameters:
        - name: regionId
          in: query
          description: The unique ID of the region.
          schema:
            type: string
        - name: locationId
          in: query
          description: The unique ID of the location.
          schema:
            type: string
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Locations'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
  /metadata/cpuarchitectures:
    get:
      tags:
        - Metadata
      summary: Get Available CPU Architecture
      description: >-
        Retrieves the available CPU Architecture that you can use in a server.
      operationId: cpuarchitectureGet
      parameters:
        - name: X-Contract-Number
          in: header
          description: >-
            Users with multiple contracts must provide the contract number, for
            which all API requests are to be executed.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CpuArchitectures'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
  /metadata/templates:
    get:
      tags:
        - Metadata
      summary: Get Cubes Templates
      description: |-
        Retrieves all available templates.

        Templates provide a pre-defined configuration for Cube servers. 

         >Templates are read-only and cannot be created, modified, or deleted by users.
      operationId: templatesGet
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Templates'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
  /metadata/templates/{templateId}:
    get:
      tags:
        - Metadata
      summary: Get Cubes Template by ID
      description: Retrieves the properties of the Cubes template specified by its ID.
      operationId: templatesFindById
      parameters:
        - name: templateId
          in: path
          description: The unique template ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Remaining:
              description: >-
                The number of requests that can still be made without triggering
                a failure response.
              schema:
                type: integer
                format: int32
            X-RateLimit-Limit:
              description: The average number of requests per minute allowed.
              schema:
                type: integer
                format: int32
            X-RateLimit-Burst:
              description: The maximum number of concurrent API requests allowed.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
        default:
          description: >-
            Any erroneous status code: 400 (parse error), 401 (auth error), 402
            (trial access), 403 (insufficient privileges), 404 (not found), 405
            (unsupported HTTP method), 415 (unsupported content type, 422
            (validation error), 429 (request rate limit exceeded), 500 (server
            error), or 503 (maintenance).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuthentication: []
        - TokenAuthentication: []
components:
  schemas:
    ElementMetadata:
      type: object
      readOnly: true
      properties:
        etag:
          type: string
          description: >-
            Resource's Entity Tag as defined in
            http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.11
          readOnly: true
          example: 45480eb3fbfc31f1d916c1eaa4abdcc3
        createdDate:
          type: string
          description: The last time the resource was created.
          format: date-time
          readOnly: true
          example: '2015-12-04T14:34:09.809Z'
        createdBy:
          type: string
          description: The user who created the resource.
          readOnly: true
          example: user@example.com
        createdByUserId:
          type: string
          description: The unique ID of the user who created the resource.
          readOnly: true
          example: user@example.com
        lastModifiedDate:
          type: string
          description: The last time the resource was modified.
          format: date-time
          readOnly: true
          example: '2015-12-04T14:34:09.809Z'
        lastModifiedBy:
          type: string
          description: The user who last modified the resource.
          readOnly: true
          example: user@example.com
        lastModifiedByUserId:
          type: string
          description: The unique ID of the user who last modified the resource.
          readOnly: true
          example: 63cef532-26fe-4a64-a4e0-de7c8a506c90
        state:
          type: string
          description: >-
            State of the resource. *AVAILABLE* There are no pending modification
            requests for this item; *BUSY* There is at least one modification
            request pending and all following requests will be queued;
            *INACTIVE* Resource has been de-provisioned; *DEPLOYING* Resource
            state DEPLOYING - relevant for Kubernetes cluster/nodepool; *ACTIVE*
            Resource state ACTIVE - relevant for Kubernetes cluster/nodepool;
            *FAILED* Resource state FAILED - relevant for Kubernetes
            cluster/nodepool; *SUSPENDED* Resource state SUSPENDED - relevant
            for Kubernetes cluster/nodepool; *FAILED_SUSPENDED* Resource state
            FAILED_SUSPENDED - relevant for Kubernetes cluster; *UPDATING*
            Resource state UPDATING - relevant for Kubernetes cluster/nodepool;
            *FAILED_UPDATING* Resource state FAILED_UPDATING - relevant for
            Kubernetes cluster/nodepool; *DESTROYING* Resource state DESTROYING
            - relevant for Kubernetes cluster; *FAILED_DESTROYING* Resource
            state FAILED_DESTROYING - relevant for Kubernetes cluster/nodepool;
            *TERMINATED* Resource state TERMINATED - relevant for Kubernetes
            cluster/nodepool; *HIBERNATING* Resource state HIBERNATING -
            relevant for Kubernetes cluster/nodepool; *FAILED_HIBERNATING*
            Resource state FAILED_HIBERNATING - relevant for Kubernetes
            cluster/nodepool; *MAINTENANCE* Resource state MAINTENANCE -
            relevant for Kubernetes cluster/nodepool; *FAILED_HIBERNATING*
            Resource state FAILED_HIBERNATING - relevant for Kubernetes
            cluster/nodepool.
          readOnly: true
          example: AVAILABLE
          enum:
            - AVAILABLE
            - INACTIVE
            - BUSY
            - DEPLOYING
            - ACTIVE
            - FAILED
            - SUSPENDED
            - FAILED_SUSPENDED
            - UPDATING
            - FAILED_UPDATING
            - DESTROYING
            - FAILED_DESTROYING
            - TERMINATED
            - HIBERNATING
            - FAILED_HIBERNATING
            - MAINTENANCE
            - FAILED_MAINTENANCE
            - UNKNOWN
    VpcProperties:
      required:
        - location
      type: object
      properties:
        name:
          type: string
          description: The name of the  resource.
          example: Production vpc
        location:
          type: string
          description: >-
            The physical location where the vpc will be created. This
            will be where all of your datacenters live.
          example: us/las
        vni:
          type: string
          description: >-
            Only settable for VPC and VPC-lite type. Unique identifier for virtual network address.
          nullable: true
          example: 15f67991-0f51-4efc-a8ad-ef1fb31a480c
        ipv4CidrBlock:
          type: array
          description: >-
            It contains the list of private IPv4 CIDR blocks on this virtual private cloud.
            This property is a read only property.
          nullable: true
          items:
            type: string
            example: 10.8.130.0/23
          x-prerelease: true
        ipv6CidrBlock:
          type: array
          description: >-
            This value is either 'null' or contains an automatically-assigned
            /56 IPv6 CIDR block if IPv6 is enabled on this virtual private cloud.
            It can neither be changed nor removed.
          nullable: true
          items:
            type: string
            example: 2001:db8:b06d:8f00::/56
          x-prerelease: true
        defaultRouterId:
          type: integer
          description: UUID of the default router for this datacenter.
          format: int32
          example: 15
    Vpc:
      required:
        - properties
      type: object
      properties:
        id:
          type: string
          description: The resource's unique identifier.
          readOnly: true
          example: 15f67991-0f51-4efc-a8ad-ef1fb31a480c
        metadata:
          $ref: '#/components/schemas/ElementMetadata'
        properties:
          $ref: '#/components/schemas/VpcProperties'
    Vpcs:
      type: object
      properties:
        items:
          type: array
          description: Array of items in the collection.
          readOnly: true
          items:
            $ref: '#/components/schemas/Vpc'
        offset:
          $ref: '#/components/schemas/PaginationOffset'
        limit:
          $ref: '#/components/schemas/PaginationLimit'
        _links:
          $ref: '#/components/schemas/PaginationLinks'
    DatacenterProperties:
      required:
        - location
      type: object
      properties:
        name:
          type: string
          description: The name of the  resource.
          example: Production datacenter
        description:
          type: string
          description: A description for the datacenter, such as staging, production.
          example: My Production Datacenter
        vpc:
          type: string
          description: >-
            The vpc where the datacenter exists.
          nullable: true
          example: c031d885-937d-4dc1-b3e1-95085c7046e2
        location:
          type: string
          description: >-
            The physical location where the datacenter will be created. This
            will be where all of your servers live. Property cannot be modified
            after datacenter creation (disallowed in update requests).
          example: us/las
        version:
          type: integer
          description: The version of the data center; incremented with every change.
          format: int32
          readOnly: true
          example: 8
        features:
          type: array
          description: >-
            List of features supported by the location where this data center is
            provisioned.
          readOnly: true
          example:
            - SSD
          items:
            type: string
        secAuthProtection:
          type: boolean
          description: >-
            Boolean value representing if the data center requires extra
            protection, such as two-step verification.
          example: true
        cpuArchitecture:
          type: array
          description: Array of features and CPU families available in a location
          readOnly: true
          items:
            $ref: '#/components/schemas/CpuArchitectureProperties'
    Datacenter:
      required:
        - properties
      type: object
      properties:
        id:
          type: string
          description: The resource's unique identifier.
          readOnly: true
          example: 15f67991-0f51-4efc-a8ad-ef1fb31a480c
        metadata:
          $ref: '#/components/schemas/ElementMetadata'
        properties:
          $ref: '#/components/schemas/DatacenterProperties'
    Datacenters:
      type: object
      properties:
        items:
          type: array
          description: Array of items in the collection.
          readOnly: true
          items:
            $ref: '#/components/schemas/Datacenter'
        offset:
          $ref: '#/components/schemas/PaginationOffset'
        limit:
          $ref: '#/components/schemas/PaginationLimit'
        _links:
          $ref: '#/components/schemas/PaginationLinks'
    VolumeProperties:
      required:
        - size
      type: object
      properties:
        name:
          type: string
          description: The name of the  resource.
          example: My resource
        server:
          type: string
          description: The uuid of the server to be attached to.
          nullable: true
          example: addc0728-2878-4ef0-96c3-742684048398
        type:
          type: string
          description: >-
            Hardware type of the volume. DAS (Direct Attached Storage) could be
            used only in a composite call with a Cube server.
          example: HDD
        size:
          type: number
          description: The size of the volume in GB.
          example: 100
        availabilityZone:
          type: string
          description: >-
            The availability zone in which the volume should be provisioned. The
            storage volume will be provisioned on as few physical storage
            devices as possible, but this cannot be guaranteed upfront. This is
            uavailable for DAS (Direct Attached Storage), and subject to
            availability for SSD.
          example: AUTO
          enum:
            - AUTO
            - ZONE_1
            - ZONE_2
            - ZONE_3
        image:
          type: string
          description: Image or snapshot ID to be used as template for this volume.
          example: d6ad1576-fde9-4696-aa41-1ebd75bdaf49
        imagePassword:
          type: string
          description: >-
            Initial password to be set for installed OS. Works with public
            images only. Not modifiable, forbidden in update requests. Password
            rules allows all characters from a-z, A-Z, 0-9.
          example: mypass123
        imageAlias:
          type: string
        sshKeys:
          type: array
          description: >-
            Public SSH keys are set on the image as authorized keys for
            appropriate SSH login to the instance using the corresponding
            private key. This field may only be set in creation requests. When
            reading, it always returns null. SSH keys are only supported if a
            public Linux image is used for the volume creation.
          example:
            - >-
              ssh-rsa
              AAAAB3NzaC1yc2EAAAADAQABAAABAQCyWh6LZ7f2wxnupVgtK2096bc69Vv9uT2A58lwN3ol0A6mxqlT0f4M1NbarVUxa+MVdxBLud5PvlkbYc9mY91OyzLGZMfVWvhAYz/tJSsDtsgRUl0GFVv332zDWk0i+mAVy0N408OORm5XqV6zvIDaiB/jopyjemUp2rnP7pXU4+98ilZw6ef9DF9y4YZ64mchL5//rcrGm1Lff3pC75X/polGONHeG6m4Vs8eIu+0epJ4PJBxO+rwRYp1zMnn90UCk21KvTcYops2cte7ouXQwkGUq3vmXxnSdvuivK/4JNoFQBsaGV974hDmloS5LOvSJjKpXs8Ed437ln712345
            - >-
              ssh-rsa
              AAAAB3NzaC1yc2EAAAADAQABAAABAQCyWh6LZ7f2wxnupVgtK2096bc69Vv9uT2A58lwN3ol0A6mxqlT0f4M1NbarVUxa+MVdxBLud5PvlkbYc9mY91OyzLGZMfVWvhAYz/tJSsDtsgRUl0GFVv332zDWk0i+mAVy0N408OORm5XqV6zvIDaiB/jopyjemUp2rnP7pXU4+98ilZw6ef9DF9y4YZ64mchL5//rcrGm1Lff3pC75X/polGONHeG6m4Vs8eIu+0epJ4PJBxO+rwRYp1zMnn90UCk21KvTcYops2cte7ouXQwkGUq3vmXxnSdvuivK/asdfghjkjhyutry545tgvbn76e4rf43
          items:
            type: string
        bus:
          type: string
          description: The bus type for this volume; default is VIRTIO.
          example: VIRTIO
          enum:
            - VIRTIO
            - IDE
            - UNKNOWN
        licenceType:
          type: string
          description: OS type for this volume.
          example: LINUX
          x-extensible-enum:
            - UNKNOWN
            - WINDOWS
            - WINDOWS2016
            - WINDOWS2019
            - WINDOWS2022
            - WINDOWS2025
            - RHEL
            - LINUX
            - OTHER
        cpuHotPlug:
          type: boolean
          description: Hot-plug capable CPU (no reboot required).
          example: true
        ramHotPlug:
          type: boolean
          description: Hot-plug capable RAM (no reboot required).
          example: true
        nicHotPlug:
          type: boolean
          description: Hot-plug capable NIC (no reboot required).
          example: true
        nicHotUnplug:
          type: boolean
          description: Hot-unplug capable NIC (no reboot required).
          example: true
        discVirtioHotPlug:
          type: boolean
          description: Hot-plug capable Virt-IO drive (no reboot required).
          example: true
        discVirtioHotUnplug:
          type: boolean
          description: >-
            Hot-unplug capable Virt-IO drive (no reboot required). Not supported
            with Windows VMs.
          example: true
        exposeSerial:
          $ref: '#/components/schemas/ExposeSerial'
        deviceNumber:
          type: integer
          description: >-
            The Logical Unit Number of the storage volume. Null for volumes, not
            mounted to a VM.
          format: int64
          readOnly: true
          example: 3
        pciSlot:
          type: integer
          description: >-
            The PCI slot number of the storage volume. Null for volumes, not
            mounted to a VM.
          format: int32
          readOnly: true
          example: 7
        backupunitId:
          type: string
          format: uuid
          description: >-
            The ID of the backup unit that the user has access to. The property
            is immutable and is only allowed to be set on creation of a new a
            volume. It is mandatory to provide either 'public image' or
            'imageAlias' in conjunction with this property.
          example: 25f67991-0f51-4efc-a8ad-ef1fb31a481c
        userData:
          type: string
          description: >-
            The cloud-init configuration for the volume as base64 encoded
            string. The property is immutable and is only allowed to be set on
            creation of a new a volume. It is mandatory to provide either
            'public image' or 'imageAlias' that has cloud-init compatibility in
            conjunction with this property.
        bootServer:
          type: string
          description: The UUID of the attached server.
          readOnly: true
          example: 25f67991-0f51-4efc-a8ad-ef1fb31a481c
        bootOrder:
          type: string
          description: >-
            Determines whether the volume will be used as a boot volume. Set to
            `NONE`, the volume will not be used as boot volume. Set to
            `PRIMARY`, the volume will be used as boot volume and all other
            volumes must be set to `NONE`. Set to `AUTO` or `null` requires all
            volumes to be set to `AUTO` or `null`; this will use the legacy
            behavior, which is to use the volume as a boot volume only if there
            are no other volumes or cdrom devices.
          nullable: true
          example: AUTO
          default: AUTO
          enum:
            - AUTO
            - NONE
            - PRIMARY
    Volume:
      required:
        - properties
      type: object
      properties:
        id:
          type: string
          description: The resource's unique identifier.
          readOnly: true
          example: 15f67991-0f51-4efc-a8ad-ef1fb31a480c
        metadata:
          $ref: '#/components/schemas/ElementMetadata'
        properties:
          $ref: '#/components/schemas/VolumeProperties'
    Cdroms:
      type: object
      properties:
        items:
          type: array
          description: Array of items in the collection.
          items:
            $ref: '#/components/schemas/Image'
        offset:
          $ref: '#/components/schemas/PaginationOffset'
        limit:
          $ref: '#/components/schemas/PaginationLimit'
        _links:
          $ref: '#/components/schemas/PaginationLinks'
    Image:
      required:
        - properties
      type: object
      properties:
        id:
          type: string
          description: The resource's unique identifier.
          readOnly: true
          example: 15f67991-0f51-4efc-a8ad-ef1fb31a480c
        metadata:
          $ref: '#/components/schemas/ElementMetadata'
        properties:
          $ref: '#/components/schemas/ImageProperties'
    ImageProperties:
      required:
        - licenceType
      type: object
      properties:
        name:
          type: string
          description: The resource name.
          example: My resource
        server:
          type: string
          description: The uuid of the server to be attached to.
          example: addc0728-2878-4ef0-96c3-742684048398
        description:
          type: string
          description: Human-readable description.
          example: 'The image/snapshot of Ubuntu '
        location:
          type: string
          description: The location of this image/snapshot.
          readOnly: true
          example: us/las
        size:
          type: number
          description: The image size in GB.
          readOnly: true
          example: 100
        cpuHotPlug:
          type: boolean
          description: Hot-plug capable CPU (no reboot required).
          example: true
        cpuHotUnplug:
          type: boolean
          description: Hot-unplug capable CPU (no reboot required).
          example: true
        ramHotPlug:
          type: boolean
          description: Hot-plug capable RAM (no reboot required).
          example: true
        ramHotUnplug:
          type: boolean
          description: Hot-unplug capable RAM (no reboot required).
          example: true
        nicHotPlug:
          type: boolean
          description: Hot-plug capable NIC (no reboot required).
          example: true
        nicHotUnplug:
          type: boolean
          description: Hot-unplug capable NIC (no reboot required).
          example: true
        discVirtioHotPlug:
          type: boolean
          description: Hot-plug capable Virt-IO drive (no reboot required).
          example: true
        discVirtioHotUnplug:
          type: boolean
          description: >-
            Hot-unplug capable Virt-IO drive (no reboot required). Not supported
            with Windows VMs.
          example: true
        discScsiHotPlug:
          type: boolean
          description: Hot-plug capable SCSI drive (no reboot required).
          example: true
        discScsiHotUnplug:
          type: boolean
          description: >-
            Hot-unplug capable SCSI drive (no reboot required). Not supported
            with Windows VMs.
          example: true
        exposeSerial:
          $ref: '#/components/schemas/ExposeSerial'
        licenceType:
          type: string
          description: The OS type of this image.
          example: LINUX
          x-extensible-enum:
            - UNKNOWN
            - WINDOWS
            - WINDOWS2016
            - WINDOWS2019
            - WINDOWS2022
            - WINDOWS2025
            - RHEL
            - LINUX
            - OTHER
        imageType:
          type: string
          description: The image type.
          readOnly: true
          example: HDD
          enum:
            - HDD
            - CDROM
            - UNKNOWN
        public:
          type: boolean
          description: Indicates whether the image is part of a public repository.
          readOnly: true
          example: true
        imageAliases:
          type: array
          description: List of image aliases mapped for this image
          readOnly: true
          items:
            type: string
        cloudInit:
          type: string
          description: Cloud init compatibility.
          example: V1
          enum:
            - NONE
            - V1
    FirewallRule:
      required:
        - properties
      type: object
      properties:
        id:
          type: string
          description: The resource's unique identifier.
          readOnly: true
          example: 15f67991-0f51-4efc-a8ad-ef1fb31a480c
        metadata:
          $ref: '#/components/schemas/ElementMetadata'
        properties:
          $ref: '#/components/schemas/FirewallRuleProperties'
    FirewallRules:
      type: object
      properties:
        items:
          type: array
          description: Array of items in the collection.
          readOnly: true
          items:
            $ref: '#/components/schemas/FirewallRule'
        offset:
          $ref: '#/components/schemas/PaginationOffset'
        limit:
          $ref: '#/components/schemas/PaginationLimit'
        _links:
          $ref: '#/components/schemas/PaginationLinks'
    FirewallRuleProperties:
      required:
        - protocol
      type: object
      properties:
        name:
          type: string
          description: The name of the  resource.
          example: My resource
        securityGroup:
          type: string
          description: The uuid of the security group to which the rule belongs to
          example: fde83b97-f515-420c-ab10-b3cfaaf45155
        protocol:
          type: string
          description: >-
            The protocol for the rule. Property cannot be modified after it is
            created (disallowed in update requests).
          example: TCP
          enum:
            - TCP
            - UDP
            - ICMP
            - ICMPv6
            - GRE
            - VRRP
            - ESP
            - AH
            - ANY
        sourceMac:
          type: string
          description: >-
            Only traffic originating from the respective MAC address is allowed.
            Valid format: aa:bb:cc:dd:ee:ff. Value null allows traffic from any
            MAC address.
          nullable: true
          example: 00:0a:95:9d:68:16
        ipVersion:
          type: string
          description: >-
            The IP version for this rule. If sourceIp or targetIp are specified,
            you can omit this value - the IP version will then be deduced from
            the IP address(es) used; if you specify it anyway, it must match the
            specified IP address(es). If neither sourceIp nor targetIp are
            specified, this rule allows traffic only for the specified IP
            version. If neither sourceIp, targetIp nor ipVersion are specified,
            this rule will only allow IPv4 traffic.
          nullable: true
          example: IPv4
          enum:
            - IPv4
            - IPv6
        sourceIp:
          type: string
          description: >-
            Only traffic originating from the respective IP address (or CIDR
            block) is allowed. Value null allows traffic from any IP address
            (according to the selected ipVersion).
          nullable: true
          example: 22.231.113.64
        targetIp:
          type: string
          description: >-
            If the target NIC has multiple IP addresses, only the traffic
            directed to the respective IP address (or CIDR block) of the NIC is
            allowed. Value null allows traffic to any target IP address
            (according to the selected ipVersion).
          nullable: true
          example: 22.231.113.64
        icmpCode:
          maximum: 254
          minimum: 0
          type: integer
          description: >-
            Defines the allowed code (from 0 to 254) if protocol ICMP or ICMPv6
            is chosen. Value null allows all codes.
          format: int32
          nullable: true
          example: 0
        icmpType:
          maximum: 254
          minimum: 0
          type: integer
          description: >-
            Defines the allowed type (from 0 to 254) if the protocol ICMP or
            ICMPv6 is chosen. Value null allows all types.
          format: int32
          nullable: true
          example: 8
        portRangeStart:
          maximum: 65535
          minimum: 1
          type: integer
          description: >-
            Defines the start range of the allowed port (from 1 to 65535) if
            protocol TCP or UDP is chosen. Leave portRangeStart and portRangeEnd
            value null to allow all ports.
          format: int32
          example: 8
        portRangeEnd:
          maximum: 65535
          minimum: 1
          type: integer
          description: >-
            Defines the end range of the allowed port (from 1 to 65535) if the
            protocol TCP or UDP is chosen. Leave portRangeStart and portRangeEnd
            null to allow all ports.
          format: int32
          example: 8
        type:
          type: string
          description: >-
            The type of the firewall rule. If not specified, the default INGRESS
            value is used.
          example: INGRESS
          enum:
            - INGRESS
            - EGRESS
    FlowLog:
      required:
        - properties
      type: object
      properties:
        id:
          type: string
          description: The resource's unique identifier.
          readOnly: true
          example: 15f67991-0f51-4efc-a8ad-ef1fb31a480c
        metadata:
          $ref: '#/components/schemas/ElementMetadata'
        properties:
          $ref: '#/components/schemas/FlowLogProperties'
    FlowLogs:
      type: object
      properties:
        items:
          type: array
          description: Array of items in the collection.
          readOnly: true
          items:
            $ref: '#/components/schemas/FlowLog'
        offset:
          $ref: '#/components/schemas/PaginationOffset'
        limit:
          $ref: '#/components/schemas/PaginationLimit'
        _links:
          $ref: '#/components/schemas/PaginationLinks'
    FlowLogProperties:
      required:
        - action
        - bucket
        - direction
        - name
      type: object
      properties:
        name:
          type: string
          description: The resource name.
          example: My resource
        nic:
          type: string
          description: The nicId where the flowLog will be attached.
          nullable: true
          example: fde83b97-f515-420c-ab10-b3cfaaf45155
        server:
          type: string
          description: The serverId where the flowLog will be attached.
          nullable: true
          example: addc0728-2878-4ef0-96c3-742684048398
        action:
          type: string
          description: Specifies the traffic action pattern.
          example: ACCEPTED
          enum:
            - ACCEPTED
            - REJECTED
            - ALL
        direction:
          type: string
          description: Specifies the traffic direction pattern.
          example: INGRESS
          enum:
            - INGRESS
            - EGRESS
            - BIDIRECTIONAL
        bucket:
          type: string
          description: The bucket name of an existing IONOS Cloud Object storage bucket.
          example: bucketName/key
    IPFailover:
      type: object
      properties:
        ip:
          type: string
          example: 192.18.2.231
        nicUuid:
          type: string
          example: 3c11273c-b3e1-4ca3-8134-84fd2dd4ebec
    LanProperties:
      type: object
      properties:
        name:
          type: string
          description: The name of the  resource.
          example: My resource
        vpc:
          type: string
          description: The id of the vpc to be attached to.
          example: addc0728-2878-4ef0-96c3-742684048398
        datacenter:
          type: string
          description: The id of the datacenter to be attached to.
          example: addc0728-2878-4ef0-96c3-742684048398
        ipFailover:
          type: array
          description: IP failover configurations for lan
          items:
            $ref: '#/components/schemas/IPFailover'
        ipv4CidrBlock:
          type: string
          description: >-
            For public LANs this property is null,
            for private LANs it contains the private IPv4 CIDR range.
            This property is a read only property.
          readOnly: true
          nullable: true
          example: 10.8.130.0/23
          x-prerelease: true
        ipv6CidrBlock:
          type: string
          description: >-
            For a GET request, this value is either 'null' or contains the LAN's
            /64 IPv6 CIDR block if this LAN is IPv6 enabled. For POST/PUT/PATCH
            requests, 'AUTO' will result in enabling this LAN for IPv6 and
            automatically assign a /64 IPv6 CIDR block to this LAN and /80 IPv6
            CIDR blocks to the NICs and one /128 IPv6 address to each connected
            NIC. If you choose the IPv6 CIDR block for the LAN on your own, then
            you must provide a /64 block, which is inside the IPv6 CIDR block of
            the virtual datacenter and unique inside all LANs from this virtual
            datacenter. If you enable IPv6 on a LAN with NICs, those NICs will
            get a /80 IPv6 CIDR block and one IPv6 address assigned to each
            automatically, unless you specify them explicitly on the LAN and on
            the NICs. A virtual data center is limited to a maximum of 256
            IPv6-enabled LANs.
          nullable: true
          example: 2001:db8:b06d:8f5a::/64
          x-prerelease: true
        public:
          type: boolean
          description: Indicates if the LAN is connected to the internet or not.
          example: true
        router:
          $ref: '#/components/schemas/ResourceReference'
        vni:
          type: integer
          format: int32
          readOnly: true
          x-internal: true
          description: The VNI value that is assigned to the LAN.
          example: 123
    Lan:
      required:
        - properties
      type: object
      properties:
        id:
          type: string
          description: The resource's unique identifier.
          readOnly: true
          example: 15f67991-0f51-4efc-a8ad-ef1fb31a480c
        metadata:
          $ref: '#/components/schemas/ElementMetadata'
        properties:
          $ref: '#/components/schemas/LanProperties'
    Lans:
      type: object
      properties:
        items:
          type: array
          description: Array of items in the collection.
          readOnly: true
          items:
            $ref: '#/components/schemas/Lan'
        offset:
          $ref: '#/components/schemas/PaginationOffset'
        limit:
          $ref: '#/components/schemas/PaginationLimit'
        _links:
          $ref: '#/components/schemas/PaginationLinks'
    Nic:
      required:
        - properties
      type: object
      properties:
        id:
          type: string
          description: The resource's unique identifier.
          readOnly: true
          example: 15f67991-0f51-4efc-a8ad-ef1fb31a480c
        metadata:
          $ref: '#/components/schemas/ElementMetadata'
        properties:
          $ref: '#/components/schemas/NicProperties'
    NicProperties:
      type: object
      properties:
        name:
          type: string
          description: The name of the  resource.
          example: My resource
        mac:
          type: string
          description: The MAC address of the NIC.
          example: 00:0a:95:9d:68:16
        ips:
          type: array
          description: >-
            Collection of IP addresses, assigned to the NIC. Explicitly assigned
            public IPs need to come from reserved IP blocks. Passing value null
            or empty array will assign an IP address automatically.
          nullable: true
          items:
            type: string
          example:
            - 10.160.12.12
        dhcp:
          type: boolean
          description: Indicates if the NIC will reserve an IP using DHCP.
          example: true
          default: true
        ipv6Ips:
          type: array
          description: >-
            If this NIC is connected to an IPv6 enabled LAN then this property
            contains the IPv6 IP addresses of the NIC. The maximum number of
            IPv6 IP addresses per NIC is 50, if you need more, contact support.
            If you leave this property 'null' when adding a NIC, when changing
            the NIC's IPv6 CIDR block, when changing the LAN's IPv6 CIDR block
            or when moving the NIC to a different IPv6 enabled LAN, then we will
            automatically assign the same number of IPv6 addresses which you had
            before from the NICs new CIDR block. If you leave this property
            'null' while not changing the CIDR block, the IPv6 IP addresses
            won't be changed either. You can also provide your own self choosen
            IPv6 addresses, which then must be inside the IPv6 CIDR block of
            this NIC.
          nullable: true
          example:
            - 2001:db8:b06d:8f5a:0609::1
          items:
            type: string
          x-prerelease: true
        ipv6CidrBlock:
          type: string
          description: >-
            If this NIC is connected to an IPv6 enabled LAN then this property
            contains the /80 IPv6 CIDR block of the NIC. If you leave this
            property 'null' when adding a NIC to an IPv6-enabled LAN, then an
            IPv6 CIDR block will automatically be assigned to the NIC, but you
            can also specify an /80 IPv6 CIDR block for the NIC on your own,
            which must be inside the /64 IPv6 CIDR block of the LAN and unique.
            This value can only be set, if the LAN already has an IPv6 CIDR
            block assigned. An IPv6-enabled LAN is limited to a maximum of
            65,536 NICs.
          nullable: true
          example: 2001:db8:b06d:8f5a:0609::/80
          x-prerelease: true
        dhcpv6:
          type: boolean
          description: >-
            Indicates if the NIC will receive an IPv6 using DHCP. It can be set
            to 'true' or 'false' only if this NIC is connected to an IPv6
            enabled LAN.
          nullable: true
          example: true
          default: true
          x-prerelease: true
        lan:
          type: string
          description: >-
            The LAN uuid the NIC will be on.
          format: uuid
          nullable: true
          example: fde83b97-f515-420c-ab10-b3cfaaf45155
        server:
          type: string
          description: >-
            The server uuid the NIC will be on.
          format: uuid
          nullable: true
          example: fde83b97-f515-420c-ab10-b3cfaaf45155
        firewallActive:
          type: boolean
          description: >-
            Activate or deactivate the firewall. By default, an active firewall
            without any defined rules will block all incoming network traffic
            except for the firewall rules that explicitly allows certain
            protocols, IP addresses and ports.
          example: false
        firewallType:
          type: string
          description: >-
            The type of firewall rules that will be allowed on the NIC. If not
            specified, the default INGRESS value is used.
          example: INGRESS
          enum:
            - INGRESS
            - EGRESS
            - BIDIRECTIONAL
        deviceNumber:
          type: integer
          description: >-
            The Logical Unit Number (LUN) of the storage volume. Null if this
            NIC was created using Cloud API and no DCD changes were performed on
            the Datacenter.
          format: int32
          readOnly: true
          example: 3
        pciSlot:
          type: integer
          description: The PCI slot number for the NIC.
          format: int32
          readOnly: true
          example: 7
        vnet:
          type: string
          description: "The vnet ID that belongs to this NIC; Requires system privileges, for internal usage
            only"
          x-internal: true
          example: null
    Nics:
      type: object
      properties:
        items:
          type: array
          description: Array of items in the collection.
          items:
            $ref: '#/components/schemas/Nic'
        offset:
          $ref: '#/components/schemas/PaginationOffset'
        limit:
          $ref: '#/components/schemas/PaginationLimit'
        _links:
          $ref: '#/components/schemas/PaginationLinks'
    ResourceReference:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: The resource's unique identifier.
        href:
          type: string
          description: URL to the object representation (absolute path).
          format: uri
          readOnly: true
    ServerProperties:
      type: object
      properties:
        templateUuid:
          type: string
          description: >-
            The ID of the template for creating a CUBE server; the available
            templates for CUBE servers can be found on the templates resource.
          example: 15f67991-0f51-4efc-a8ad-ef1fb31a480c
        name:
          type: string
          description: The name of the  resource.
          example: My resource
        hostname:
          type: string
          description: >-
            The hostname of the  resource.
            Allowed characters are a-z, 0-9 and - (minus).
            Hostname should not start with minus and should not be longer than 63 characters.
          example: myHostname
        cores:
          type: integer
          description: The total number of cores for the enterprise server.
          format: int32
          example: 4
        ram:
          type: integer
          description: >-
            The memory size for the enterprise server in MB, such as 2048. Size
            must be specified in multiples of 256 MB with a minimum of 256 MB;
            however, if you set ramHotPlug to TRUE then you must use a minimum
            of 1024 MB. If you set the RAM size more than 240GB, then ramHotPlug
            will be set to FALSE and can not be set to TRUE unless RAM size not
            set to less than 240GB.
          format: int32
          example: 4096
        availabilityZone:
          type: string
          description: The availability zone in which the server should be provisioned.
          example: AUTO
          enum:
            - AUTO
            - ZONE_1
            - ZONE_2
        vmState:
          type: string
          description: Status of the virtual machine.
          readOnly: true
          example: RUNNING
          enum:
            - NOSTATE
            - RUNNING
            - BLOCKED
            - PAUSED
            - SHUTDOWN
            - SHUTOFF
            - CRASHED
            - SUSPENDED
        bootCdrom:
          $ref: '#/components/schemas/ResourceReference'
        bootVolume:
          $ref: '#/components/schemas/ResourceReference'
        cpuFamily:
          type: string
          description: >-
            CPU architecture on which server gets provisioned; not all CPU
            architectures are available in all datacenter regions; available CPU
            architectures can be retrieved from the datacenter resource; must
            not be provided for CUBE and VCPU servers.
          example: INTEL_ICELAKE
        type:
          type: string
          description: 'Server type: CUBE, ENTERPRISE or VCPU.'
          example: CUBE
        datacenter:
          type: string
          description: The id of the datacenter to be attached to
          nullable: true
          example: a4c6c98b-45b4-4b30-95c7-fab73eeb3089
        placementGroupId:
          type: "string"
          description: "The placement group ID that belongs to this server; Requires system privileges, for internal usage
            only"
          x-internal: true
          example: null
        nicMultiQueue:
          type: boolean
          description: >-
            Activate or deactivate the Multi Queue feature on all NICs of this server. This feature is beneficial to 
            enable when the NICs are experiencing performance issues (e.g. low throughput). Toggling this
            feature will also initiate a restart of the server. If the specified value is `true`, the feature will 
            be activated; if it is not specified or set to `false`, the feature will be deactivated.
            It is not allowed for servers of type Cube.
          example: true
          default: false
    Images:
      type: object
      properties:
        items:
          type: array
          description: Array of items in the collection.
          readOnly: true
          items:
            $ref: '#/components/schemas/Image'
    IpBlock:
      required:
        - properties
      type: object
      properties:
        id:
          type: string
          description: The resource's unique identifier.
          readOnly: true
          example: 15f67991-0f51-4efc-a8ad-ef1fb31a480c
        metadata:
          $ref: '#/components/schemas/ElementMetadata'
        properties:
          $ref: '#/components/schemas/IpBlockProperties'
    IpBlockProperties:
      required:
        - location
        - size
      type: object
      properties:
        ips:
          type: array
          description: Collection of IPs, associated with the IP Block.
          readOnly: true
          example:
            - 22.231.113.64
            - 22.231.113.65
            - 22.231.113.66
          items:
            type: string
        location:
          type: string
          description: >-
            Location of that IP block. Property cannot be modified after it is
            created (disallowed in update requests).
          example: us/las
        size:
          type: integer
          description: The size of the IP block.
          format: int32
          example: 5
        name:
          type: string
          description: The name of the  resource.
          example: My resource
        ipConsumers:
          type: array
          description: Read-Only attribute. Lists consumption detail for an individual IP
          readOnly: true
          example:
            - ip: 192.18.2.11
              mac: 02:01:3f:52:6e:57
              nicId: 0e8ee463-1174-46f2-87ba-a5c79c14d8e5
              serverId: e6a3466f-8d6e-4cb6-8001-f4e245f222b7
              serverName: Unnamed Server
              datacenterId: 6e54a9ec-aace-4176-8ee4-1c3a704fccfc
              datacenterName: IpConsumerDC
              k8sNodePoolUuid: 6e54a9ec-aace-4176-8ee4-1c3a704fcc12
              k8sClusterUuid: 6e54a9ec-aace-4176-8ee4-1c3a704fcc23
          items:
            $ref: '#/components/schemas/IpConsumer'
    IpBlocks:
      type: object
      properties:
        items:
          type: array
          description: Array of items in the collection.
          readOnly: true
          items:
            $ref: '#/components/schemas/IpBlock'
        offset:
          $ref: '#/components/schemas/PaginationOffset'
        limit:
          $ref: '#/components/schemas/PaginationLimit'
        _links:
          $ref: '#/components/schemas/PaginationLinks'
    LocationProperties:
      type: object
      properties:
        name:
          type: string
          description: The location name.
          example: berlin
        region:
          type: string
          description: The regions where the location is
          example: de
        features:
          type: array
          description: A list of available features in the location.
          readOnly: true
          example:
            - cloud-init-private-image
            - ssd
          items:
            type: string
        imageAliases:
          type: array
          description: A list of image aliases available in the location.
          readOnly: true
          example:
            - windows:2012r2_iso
            - windows:2019_iso
            - ubuntu:18.04_iso
          items:
            type: string
        cpuArchitecture:
          type: array
          description: >-
            A list of available CPU types and related resources available in the
            location.
          readOnly: true
          items:
            $ref: '#/components/schemas/CpuArchitectureProperties'
    CpuArchitectureProperties:
      type: object
      properties:
        cpuFamily:
          type: string
          description: A valid CPU family name.
          example: INTEL_ICELAKE
        maxCores:
          type: integer
          description: The maximum number of cores available.
          format: int32
          example: 62
        maxRam:
          type: integer
          description: The maximum RAM size in MB.
          format: int32
          example: 245760
        vendor:
          type: string
          description: A valid CPU vendor name.
          example: AuthenticAMD
    CpuArchitecture:
      required:
        - properties
      type: object
      properties:
        properties:
          $ref: '#/components/schemas/CpuArchitectureProperties'
    CpuArchitectures:
      type: object
      properties:
        items:
          type: array
          description: Array of items in the collection.
          readOnly: true
          items:
            $ref: '#/components/schemas/CpuArchitecture'
        offset:
          $ref: '#/components/schemas/PaginationOffset'
        limit:
          $ref: '#/components/schemas/PaginationLimit'
        _links:
          $ref: '#/components/schemas/PaginationLinks'
    Location:
      required:
        - properties
      type: object
      properties:
        id:
          type: string
          description: The resource's unique identifier.
          readOnly: true
          example: 15f67991-0f51-4efc-a8ad-ef1fb31a480c
        metadata:
          $ref: '#/components/schemas/ElementMetadata'
        properties:
          $ref: '#/components/schemas/LocationProperties'
    Locations:
      type: object
      properties:
        items:
          type: array
          description: Array of items in the collection.
          readOnly: true
          items:
            $ref: '#/components/schemas/Location'
    IpConsumer:
      type: object
      properties:
        ip:
          type: string
        mac:
          type: string
        nicId:
          type: string
        serverId:
          type: string
        serverName:
          type: string
        datacenterId:
          type: string
        datacenterName:
          type: string
        k8sNodePoolUuid:
          type: string
        k8sClusterUuid:
          type: string
    ServerOperationResponse:
      type: object
      properties:
        url:
          type: string
          description: The remote console url with the jwToken parameter for access
          readOnly: true
          example: >-
            https://dcd.ionos.com/noVNC?token=eyJ0eXAiOiJKV1QiLCJraWQiOiI0MWM1MDFlNC03NGY3LTQwYjctYmMxMi1lZWIzMTAzNThlZDkiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJpb25vc2Nsb3VkIiwiaWF0IjoxNjAyNDg5NTkzMDcxLCJzZXJ2ZXIiOnsidXVpZCI6IjMwNGEwZGVlLWE3OTgtNDNhNi04MzIyLTk3M2NiYzc3Yjg4ZCIsIm5hbWUiOiJTZXJ2ZXIifX0.TND9kJd8GXM39XP5PMH_LnF_99al4MEkI_eoEowPvPztirgM50aZEdg6SuLYQzg-R7vrA7hEFaK4NJb2BUUsIZYVMhjl1QmKUE5TnP0Q2zYnIfNQNZFDu2rKrOydPCkPQwlMVvvZLeBSz7lrKYujF-qZ_yY_6SHlFtt-rg6IznRtup8AFziXtl-9cEsWU92_GCTd5LiriQrsnFAiGRbb0p2_6OYAQAH9FeWu4cxrbSwUmeR7Q4klJyZqFd0fv6UTFBtpSiyci7rsB142MXyLcqM4PrBkgd9P5OFbJYf5lbsb9pW04wLSl9rqoWGgZvWsqpuzosUkQRZt_O5yuYmT9w
        token:
          type: string
          description: The jwToken for the server.
          readOnly: true
          example: >-
            eyJ0eXAiOiJKV1QiLCJraWQiOiI0MWM1MDFlNC03NGY3LTQwYjctYmMxMi1lZWIzMTAzNThlZDkiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJpb25vc2Nsb3VkIiwiaWF0IjoxNjAyNDg5NTkzMDcxLCJzZXJ2ZXIiOnsidXVpZCI6IjMwNGEwZGVlLWE3OTgtNDNhNi04MzIyLTk3M2NiYzc3Yjg4ZCIsIm5hbWUiOiJTZXJ2ZXIifX0.TND9kJd8GXM39XP5PMH_LnF_99al4MEkI_eoEowPvPztirgM50aZEdg6SuLYQzg-R7vrA7hEFaK4NJb2BUUsIZYVMhjl1QmKUE5TnP0Q2zYnIfNQNZFDu2rKrOydPCkPQwlMVvvZLeBSz7lrKYujF-qZ_yY_6SHlFtt-rg6IznRtup8AFziXtl-9cEsWU92_GCTd5LiriQrsnFAiGRbb0p2_6OYAQAH9FeWu4cxrbSwUmeR7Q4klJyZqFd0fv6UTFBtpSiyci7rsB142MXyLcqM4PrBkgd9P5OFbJYf5lbsb9pW04wLSl9rqoWGgZvWsqpuzosUkQRZt_O5yuYmT9w
    Server:
      required:
        - properties
      type: object
      properties:
        id:
          type: string
          description: The resource's unique identifier.
          readOnly: true
          example: 15f67991-0f51-4efc-a8ad-ef1fb31a480c
        metadata:
          $ref: '#/components/schemas/ElementMetadata'
        properties:
          $ref: '#/components/schemas/ServerProperties'
    Servers:
      type: object
      properties:
        items:
          type: array
          description: Array of items in the collection.
          readOnly: true
          items:
            $ref: '#/components/schemas/Server'
        offset:
          $ref: '#/components/schemas/PaginationOffset'
        limit:
          $ref: '#/components/schemas/PaginationLimit'
        _links:
          $ref: '#/components/schemas/PaginationLinks'
    ServerOperation:
      required:
        - properties
      type: object
      properties:
        properties:
          $ref: '#/components/schemas/ServerOperationProperties'
    ServerOperationProperties:
      type: object
      properties:
        name:
          type: string
          description: The requested operation
          example: START
          enum:
          - REBOOT
          - START
          - STOP
          - SUSPEND
          - RESUME
          - UPGRADE
          - TOKEN
          - REMOTECONSOLE
    SnapshotProperties:
      type: object
      properties:
        name:
          type: string
          description: The name of the  resource.
          example: My resource
        description:
          type: string
          description: Human-readable description.
          example: 'Image/Snapshot of Ubuntu '
        location:
          type: string
          description: 'Location of that image/snapshot. '
          readOnly: true
          example: us/las
        size:
          type: number
          description: The size of the image in GB.
          readOnly: true
          example: 100
        secAuthProtection:
          type: boolean
          description: >-
            Boolean value representing if the snapshot requires extra
            protection, such as two-step verification.
          example: true
        cpuHotPlug:
          type: boolean
          description: Hot-plug capable CPU (no reboot required).
          example: true
        cpuHotUnplug:
          type: boolean
          description: Hot-unplug capable CPU (no reboot required).
          example: true
        ramHotPlug:
          type: boolean
          description: Hot-plug capable RAM (no reboot required).
          example: true
        ramHotUnplug:
          type: boolean
          description: Hot-unplug capable RAM (no reboot required).
          example: true
        nicHotPlug:
          type: boolean
          description: Hot-plug capable NIC (no reboot required).
          example: true
        nicHotUnplug:
          type: boolean
          description: Hot-unplug capable NIC (no reboot required).
          example: true
        discVirtioHotPlug:
          type: boolean
          description: Hot-plug capable Virt-IO drive (no reboot required).
          example: true
        discVirtioHotUnplug:
          type: boolean
          description: >-
            Hot-unplug capable Virt-IO drive (no reboot required). Not supported
            with Windows VMs.
          example: true
        discScsiHotPlug:
          type: boolean
          description: Hot-plug capable SCSI drive (no reboot required).
          example: true
        exposeSerial:
          $ref: '#/components/schemas/ExposeSerial'
        discScsiHotUnplug:
          type: boolean
          description: >-
            Is capable of SCSI drive hot unplug (no reboot required). This works
            only for non-Windows virtual Machines.
          example: true
        licenceType:
          type: string
          description: OS type of this snapshot
          example: LINUX
          x-extensible-enum:
            - UNKNOWN
            - WINDOWS
            - WINDOWS2016
            - WINDOWS2019
            - WINDOWS2022
            - WINDOWS2025
            - RHEL
            - LINUX
            - OTHER
    Snapshot:
      required:
        - properties
      type: object
      properties:
        id:
          type: string
          description: The resource's unique identifier.
          readOnly: true
          example: 15f67991-0f51-4efc-a8ad-ef1fb31a480c
        metadata:
          $ref: '#/components/schemas/ElementMetadata'
        properties:
          $ref: '#/components/schemas/SnapshotProperties'
    CreateSnapshot:
      type: object
      properties:
        properties:
          $ref: '#/components/schemas/CreateSnapshotProperties'
    CreateSnapshotProperties:
      type: object
      properties:
        name:
          type: string
          description: The name of the snapshot
        volume:
          type: string
          format: uuid
          description: The uuid of the volume
          example: a4c6c98b-45b4-4b30-95c7-fab73eeb3089
        description:
          type: string
          description: The description of the snapshot
        secAuthProtection:
          type: boolean
          description: >-
            Flag representing if extra protection is enabled on snapshot e.g.
            Two Factor protection etc.
        licenceType:
          type: string
          description: OS type of this Snapshot
          example: LINUX
          x-extensible-enum:
            - UNKNOWN
            - WINDOWS
            - WINDOWS2016
            - WINDOWS2019
            - WINDOWS2022
            - WINDOWS2025
            - RHEL
            - LINUX
            - OTHER
    RestoreSnapshot:
      type: object
      properties:
        properties:
          $ref: '#/components/schemas/RestoreSnapshotProperties'
    RestoreSnapshotProperties:
      type: object
      properties:
        snapshotId:
          type: string
          description: The id of the snapshot
        volume:
          type: string
          format: uuid
          description: The uuid of the volume
          example: a4c6c98b-45b4-4b30-95c7-fab73eeb3089
    Snapshots:
      type: object
      properties:
        items:
          type: array
          description: Array of items in the collection.
          readOnly: true
          items:
            $ref: '#/components/schemas/Snapshot'
    Volumes:
      type: object
      properties:
        items:
          type: array
          description: Array of items in the collection.
          readOnly: true
          items:
            $ref: '#/components/schemas/Volume'
        offset:
          $ref: '#/components/schemas/PaginationOffset'
        limit:
          $ref: '#/components/schemas/PaginationLimit'
        _links:
          $ref: '#/components/schemas/PaginationLinks'
    VirtualRouters:
      type: object
      properties:
        items:
          type: array
          description: Array of items in the collection.
          readOnly: true
          items:
            $ref: '#/components/schemas/VirtualRouter'
        offset:
          $ref: '#/components/schemas/PaginationOffset'
        limit:
          $ref: '#/components/schemas/PaginationLimit'
        _links:
          $ref: '#/components/schemas/PaginationLinks'
    VirtualRouterRequest:
      required:
        - properties
      type: object
      properties:
        properties:
          $ref: '#/components/schemas/VirtualRouterRequestProperties'
    VirtualRouter:
      required:
        - properties
      type: object
      properties:
        id:
          type: string
          description: The resource's unique identifier.
          readOnly: true
          example: 15f67991-0f51-4efc-a8ad-ef1fb31a480c
        metadata:
          $ref: '#/components/schemas/ElementMetadata'
        properties:
          $ref: '#/components/schemas/VirtualRouterProperties'
    VirtualRouterRequestProperties:
      type: object
      properties:
        name:
          type: string
          description: The name of the virtual router.
          example: My virtual router
        vpc:
          type: string
          format: uuid
          description: The id of the vpc.
          example: aa5f6bcf-c9db-46d3-9d4c-330aa90647aa
        description:
          type: string
          description: The description of the virtual router.
          example: My virtual router description.
        default:
          type: boolean
          description: >-
            Indicates if the virtual router is the default router of the vpc.
            There can be only one default router in a vpc.
          example: true
          default: false
    VirtualRouterProperties:
      type: object
      properties:
        name:
          type: string
          description: The name of the virtual router.
          example: My virtual router
        vpc:
          type: string
          format: uuid
          description: The id of the vpc.
          example: aa5f6bcf-c9db-46d3-9d4c-330aa90647aa
        description:
          type: string
          description: The description of the virtual router.
          example: My virtual router description.
        default:
          type: boolean
          description: >-
            Indicates if the virtual router is the default router of the vpc.
            There can be only one default router in a vpc.
          example: true
          default: false
        lans:
          type: array
          description: >-
            List containing details of the LANs assigned to this virtual router.
          readOnly: true
          items:
            $ref: '#/components/schemas/ResourceReference'
        nics:
          type: array
          description: >-
            List containing details of the NICs assigned to this virtual router.
          readOnly: true
          items:
            $ref: '#/components/schemas/ResourceReference'
    VirtualRoutes:
      type: object
      properties:
        items:
          type: array
          description: Array of items in the collection.
          readOnly: true
          items:
            $ref: '#/components/schemas/VirtualRoute'
        offset:
          $ref: '#/components/schemas/PaginationOffset'
        limit:
          $ref: '#/components/schemas/PaginationLimit'
        _links:
          $ref: '#/components/schemas/PaginationLinks'
    VirtualRoute:
      required:
        - properties
      type: object
      properties:
        id:
          type: string
          description: The resource's unique identifier.
          readOnly: true
          example: 15f67991-0f51-4efc-a8ad-ef1fb31a480c
        metadata:
          $ref: '#/components/schemas/ElementMetadata'
        properties:
          $ref: '#/components/schemas/VirtualRouteProperties'
    VirtualRouteProperties:
      required:
        - prefix
        - gatewayType
      type: object
      properties:
        name:
          type: string
          description: The name of the virtual route.
          example: My virtual route
        router:
          type: string
          format: uuid
          description: The uuid of the virtual router.
          example: aa5f6bcf-c9db-46d3-9d4c-330aa90647aa
        description:
          type: string
          description: The description of the virtual route.
          example: My virtual route description.
        prefix:
          type: string
          description: >-
            IPV4 or IPV6 CIDR representing the prefix for the virtual route. 
            If the gateway type is `INTERNET` the prefix will be set to 0.0.0.0/0.
          example: 10.1.2.0/23
        gatewayType:
          type: string
          description: Gateway type of the virtual route.
          example: PEERING
          enum:
            - LOCAL
            - INTERNET
            - GUEST
            - PEERING
        gatewayNic:
          type: string
          format: uuid
          description: >-
            UUID of the gateway NIC of this virtual route. Must be specified only if the 
            gateway type is `PEERING` or `GUEST`.
          example: 25f67991-0f51-4efc-a8ad-ef1fb31a481c
          nullable: true
        gatewayIp:
          type: string
          description: >-
            IPv4 or IPv6 Gateway IP for the virtual route. Must be specified only if the
            gateway type is `PEERING` or `GUEST`.
          example: 80.1.5.16
          nullable: true
    ExposeSerial:
      type: boolean
      description: >-
        If set to `true` will expose the serial id of the disk attached to the server. If
        set to `false` will not expose the serial id. Some operating systems or software
        solutions require the serial id to be exposed to work properly. Exposing the serial 
        can influence licensed software (e.g. Windows) behavior
      example: true
      default: false
    Error:
      type: object
      properties:
        httpStatus:
          type: integer
          description: HTTP status code of the operation.
          format: int32
          readOnly: true
          example: 400
        messages:
          type: array
          items:
            $ref: '#/components/schemas/ErrorMessage'
    ErrorMessage:
      type: object
      properties:
        errorCode:
          type: string
          description: Application internal error code.
          readOnly: true
          example: '123'
        message:
          type: string
          description: A human-readable message.
          readOnly: true
          example: Error message example.
    PaginationOffset:
      type: number
      description: The offset (if specified in the request).
      example: 0
    PaginationLimit:
      type: number
      description: The limit (if specified in the request).
      example: 1000
    PaginationLinks:
      type: object
      properties:
        prev:
          type: string
          description: >-
            URL (with offset and limit parameters) of the previous page; only
            present if offset is greater than 0.
          format: uri
          readOnly: true
          example: <PREVIOUS-PAGE-URI>
        self:
          type: string
          description: URL (with offset and limit parameters) of the current page.
          format: uri
          readOnly: true
          example: <THIS-PAGE-URI>
        next:
          type: string
          description: >-
            URL (with offset and limit parameters) of the next page; only
            present if offset + limit is less than the total number of elements.
          format: uri
          readOnly: true
          example: <NEXT-PAGE-URI>
    SecurityGroups:
      type: object
      properties:
        items:
          type: array
          description: Array of items in the collection.
          readOnly: true
          items:
            $ref: '#/components/schemas/SecurityGroup'
        offset:
          $ref: '#/components/schemas/PaginationOffset'
        limit:
          $ref: '#/components/schemas/PaginationLimit'
        _links:
          $ref: '#/components/schemas/PaginationLinks'
    SecurityGroup:
      required:
        - properties
      type: object
      properties:
        id:
          type: string
          description: The resource's unique identifier.
          readOnly: true
          example: 15f67991-0f51-4efc-a8ad-ef1fb31a480c
        metadata:
          $ref: '#/components/schemas/ElementMetadata'
        properties:
          $ref: '#/components/schemas/SecurityGroupProperties'
    SecurityGroupRequest:
      required:
        - properties
      type: object
      properties:
        properties:
          $ref: '#/components/schemas/SecurityGroupProperties'
    SecurityGroupProperties:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          maxLength: 60
          description: The name of the security group.
          nullable: true
          example: My security group
        vpc:
          type: string
          format: uuid
          description: The id of the vpc.
          nullable: true
          example: aa5f6bcf-c9db-46d3-9d4c-330aa90647aa
        datacenter:
          type: string
          format: uuid
          description: The id of the datacenter.
          nullable: true
          example: 8ff2cefe-9d76-4083-af00-46aef9b3578b
        nic:
          type: string
          format: uuid
          description: The id of the nic.
          example: 485e0c30-a26f-4a0b-b655-b7cf9c730aa8
        description:
          type: string
          maxLength: 300
          description: The description of the security group.
          example: My security group description
    Templates:
      type: object
      properties:
        items:
          type: array
          description: Array of items in the collection.
          readOnly: true
          items:
            $ref: '#/components/schemas/Template'
    Template:
      required:
        - properties
      type: object
      properties:
        id:
          type: string
          description: The resource's unique identifier.
          readOnly: true
          example: 15f67991-0f51-4efc-a8ad-ef1fb31a480c
        metadata:
          $ref: '#/components/schemas/ElementMetadata'
        properties:
          $ref: '#/components/schemas/TemplateProperties'
    TemplateProperties:
      required:
        - cores
        - name
        - ram
        - storageSize
        - category
      type: object
      properties:
        name:
          type: string
          description: The resource name.
          example: My resource
        cores:
          type: number
          description: The CPU cores count.
          example: 2
        ram:
          type: number
          description: The RAM size in MB.
          example: 2048
        storageSize:
          type: number
          description: The storage size in GB.
          example: 10
        category:
          type: string
          description: The description of the template.
          example: Template category
  responses:
    apiError:
      description: >-
        Any erroneous status code: 400 (parse error), 401 (auth error), 402
        (trial access), 403 (insufficient privileges), 404 (not found), 405
        (unsupported HTTP method), 415 (unsupported content type, 422
        (validation error), 429 (request rate limit exceeded), 500 (server
        error), or 503 (maintenance).
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Error'
    apiErrorK8sVersion:
      description: >-
        Any erroneous status code: 401 (auth error), 404 (not found), 405
        (unsupported HTTP method), 415 (unsupported content type), 422
        (validation error), 500 (server error), 503 (maintenance)
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Error'
  parameters:
    contractNumber:
      name: X-Contract-Number
      in: header
      description: >-
        Users with multiple contracts must provide the contract number, for
        which all API requests are to be executed.
      schema:
        type: integer
        format: int32
    flowLogId:
      name: flowLogId
      in: path
      description: The unique ID of the Flow Log.
      required: true
      schema:
        type: string
    offset:
      name: offset
      in: query
      description: >-
        The first element (from the complete list of the elements) to include in
        the response (used together with <b><i>limit</i></b> for pagination).
      schema:
        minimum: 0
        type: integer
        format: int32
        default: 0
    limit:
      name: limit
      in: query
      description: >-
        The maximum number of elements to return (use together with offset for
        pagination).
      schema:
        maximum: 10000
        minimum: 1
        type: integer
        format: int32
        default: 1000
    limitUser:
      name: limit
      in: query
      description: >-
        The maximum number of elements to return (use together with
        <code>offset</code> for pagination).
      schema:
        maximum: 100
        minimum: 1
        type: integer
        format: int32
        default: 100
    limitDefault100:
      name: limit
      in: query
      description: >-
        The maximum number of elements to return (use together with offset for
        pagination).
      schema:
        maximum: 1000
        minimum: 1
        type: integer
        format: int32
        default: 100
    limitDefault100MaxLimit200:
      name: limit
      in: query
      description: >-
        The maximum number of elements to return (used together with
        <b><i>offset</i></b> for pagination). It must not exceed
        <b><i>200</i></b>.
      schema:
        maximum: 200
        minimum: 1
        type: integer
        format: int32
        default: 100
  securitySchemes:
    BasicAuthentication:
      type: http
      description: >-
        You will need to base64 encode the string containing your credentials.
        <div style="padding: 15px; border: 1px solid #d1ecf1; background-color: #d1ecf1; color: #0c5460; margin-bottom: 15px;">
          <strong>Note:</strong><br/><br/>
          From **March 15, 2024**, this option will only be accessible if your account **does not 
          have 2-Factor Authentication (2FA) enabled**.
        </div>
        Separate your username and password with a colon, i.e.,
        username:password and send it as 'Authorization' request header. More
        details: https://en.wikipedia.org/wiki/Basic_access_authentication
      scheme: basic
    TokenAuthentication:
      type: apiKey
      description: >-
        Please provide header value as 'Bearer <token>' and don't forget to add
        'Bearer' HTTP Authorization Scheme before the token.
      name: Authorization
      in: header
x-original-swagger-version: '2.0'
